---
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
filters: 
    - webr
webr:
    packages: ["dplyr", "ggplot2"]
---

# Gráficos de relación

Los gráficos de relación son aquellos que nos permiten visualizar la relación que tienen entre sí dos o más variables. Dentro de los gráficos de relación también se puede denominar gráficos de correlación, y agrupan una familia más grande que la que veíamos en la @fig-vis-classification.

En este capítulo veremos los siguientes gráficos de relación:

1.  Gráfico de dispersión (*Scatter plot*)

2.  Gráfico de burbujas (*Bubble plot*)

3.  Mapa de calor (*Heatmap*)

En este capítulo vamos a trabajar con dos datasets:

-   `iris`: se utilizará para los ejemplos utilizados en las explicaciones (ver [Tipos de visualización](#sec-visualization-types){target="_blank"}). <!--# eliminar? -->

-   `gapminder`: se utilizará para los ejemplos utilizados en las explicaciones (ver [Tipos de visualización](#sec-visualization-types){target="_blank"}). Filtraremos solamente los datos del 2002.

-   `inventario`: serán los datos que utilizarán los alumnos para los ejercicios propuestos (ver @sec-vis-data).

Para comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo.

```{r}
#| include: false
## Paquetes internos
library(ggtext)
library(gt)
```

```{r}
# Cargar paquetes
library(dplyr)
library(gapminder)
library(ggplot2)
library(readr)
# Cargar datos
inventario_tbl <- read_rds("data/inventario_prep.rds")
gapminder_tbl <- gapminder |> 
    filter(year == 2002)
```

## Objetivos

Al final de este capítulo serás capaz de:

-   Utilizar un tema distinto por defecto

-   Crear gráficos de dispersión y burbujas

-   Crear mapas de calor

-   Controlar colores utilizando `scales`

-   Mover la leyenda

## Gráficos de dispersión

Antes de empezar, vamos a ver como modificar el tema que viene por defecto en `{ggplot2}`, para que no tengamos que añadirlo en cada gráfico que hagamos.

Utilizando la función `theme_set()` podemos establecer un tema por defecto para todos los gráficos que hagamos en el documento. En este caso, hemos seleccionado el tema `theme_classic()`, que es uno de los temas más utilizados en `{ggplot2}`.

```{r}
theme_set(
    theme_classic()
)
```

Los gráficos de dispersión son una de las formas más comunes de visualizar la relación entre dos **variables numéricas**. En un gráfico de dispersión, cada punto representa una observación y se coloca en el eje `x` según el valor de la primera variable y en el eje `y` según el valor de la segunda variable.

Para crear un gráfico de dispersión en `ggplot2` se utiliza la función `geom_point()`. A continuación, se muestra un ejemplo de cómo crear un gráfico de dispersión utilizando el *dataset* `gapminder` relacionando el PIB per cápita con la esperanza de vida, y coloreando los puntos según el continente.

```{r}
#| label: fig-dispersion-scatter
#| fig-cap: Gráfico de dispersión con ggplot2
## Crear gráfico
base_scatter_gg <- gapminder_tbl |> 
    ggplot(
        aes(x = gdpPercap, y = lifeExp, color = continent)
    ) +
    geom_point(
        size = 2
    ) +
    labs(
        x = "PIB per cápita",
        y = "Esperanza de vida"
    )
## Imprimir
base_scatter_gg
```

Fíjate que como hemos utilizado `theme_set()` al principio del documento, no hemos tenido que añadir `theme_classic()` en el gráfico.

Pues así de sencillo es crear un gráfico de dispersión en `ggplot2`. Como ya estamos familiarizados con la funcionalidad básica, vamos a aprender a cambiar los colores de los puntos y a mover la leyenda.

Vamos a empezar modificando los colores de cada uno de los continentes para que sean:

-   `África`: naranja

-   `América`: negro

-   `Asia`: lila

-   `Europa`: azul

-   `Oceanía`: verde

Si recordáis, en la @sec-components-scales veíamos que las variables numéricas traen por defecto una escala continua (i.e. `scale_*_continuous()`) y las variables categóricas una escala de discreta (i.e. `scale_*_discrete()`).

En este caso, queremos cambiar los colores de las especies, y para ello tenemos que modificar la escala a `manual` con la función `scale_color_manual()`. A continuación, se muestra el código para cambiar los colores de las especies:

```{r}
#| label: fig-dispersion-scatter-colors
#| fig-cap: Gráfico de dispersión con ggplot2
## Crear gráfico
scales_scatter_gg <- base_scatter_gg +
    scale_color_manual(
        name   = "Continente",
        values = c("#FF5733", "black", "#A833FF", "#3366FF", "#33FF57")
    )
## Imprimir
scales_scatter_gg
```

Con el argumento `name` de las funciones `scale*` podemos cambiar el nombre de la leyenda, y en `values` tenemos que especificar un vector con los colores que queremos asignar a cada categoría.

::: callout-note
En @fig-dispersion-scatter-colors hemos asignado a `values` un vector de longitud 5 porque tenemos 5 categorías (1 por continente). Si asignamos más colores de los necesarios, la función los ignorará, mientras que si asignamos menos, la función nos dará el error: *`Insufficient values in manual scale`*
:::

Lo siguiente que vamos a aprender es a mover la leyenda. Aquí tenemos dos opciones:

-   Utilizar una posición relativa al gráfico

-   Utilizar una posición absoluta dentro del gráfico

Vamos a utilizar el método introducido en la versión 3.5.0 de `{ggplot2}` que es el siguiente:

::: panel-tabset
## Posición relativa

La posición relativa es la más sencilla. La forma **recomendable** es la siguiente, ya que si tuviéramos más de una leyenda, podríamos controlar la posición de cada una dentro de `guides`.

Lo que estamos haciendo es: (1) utilizar la función `guides`; (2) como argumento utilizar el nombre la estética de la leyenda que queremos modificar (`color`); (3) utilizar la función `guide_legend()` que tiene muchos argumentos para modificar la leyenda.

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

## Load packages
library(bslib)
library(dplyr)
library(gapminder)
library(ggplot2)
library(glue)
library(shiny)

## UI
ui <- page_sidebar(
    sidebar = sidebar(
        open = "open",
        width = 200,
        selectInput(
            inputId = "position_input", 
            label   = "Posición", 
            choices = c("bottom", "top", "left", "right", "inside"),
        )
    ),
    verbatimTextOutput("code") |> card(),
    plotOutput("plot", width = 500) |> card()
)

## Server
server <- function(input, output, session) {
    
    output$code <- renderPrint({
        glue(
            '
            scales_scatter_gg +
                guides(
                    color = guide_legend(
                        position = "{input$position_input}"
                    )
                )'
            )
    })

    ## Plot
    output$plot <- renderPlot({
        gapminder |> 
            filter(year == 2002) |> 
            ggplot(
                aes(x = gdpPercap, y = lifeExp, color = continent)
            ) +
            geom_point(
                size = 2
            ) +
            labs(
                x = "PIB per cápita",
                y = "Esperanza de vida"
            ) +
            scale_color_manual(
                name   = "Continente",
                values = c("#FF5733", "black", "#A833FF", "#3366FF", "#33FF57")
            ) +
            guides(
                color = guide_legend(
                    position = {input$position_input}
                )
            ) +
            theme_bw(base_size = 8)
        }, res = 96
    )
}

## Run app
shinyApp(ui = ui, server = server)
```

## Posición absoluta

Para la posición absoluta, debemos utilizar `position = "inside"`. Una vez hecho esto, debemos modificar el argumento `legend.position.inside` dentro de la función `theme()` indicar un vector numérico de longitud 2, donde el primer número indica el % de desplazamiento sobre el eje `x` desde el origen, mientras que el segundo número indica el % de desplazamiento sobre el eje `y`. Prueba a cambiar los valores en la siguiente aplicación para entender su funcionamiento:

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

## Load packages
library(bslib)
library(dplyr)
library(gapminder)
library(ggplot2)
library(glue)
library(shiny)

## UI
ui <- page_sidebar(
    sidebar = sidebar(
        open = "open",
        width = 200,
        sliderInput(
            inputId = "position_input_x", 
            label   = "Posición eje x",
            min     = 0,
            max     = 1,
            value   = 0.5,
            step    = 0.1
        ),
        sliderInput(
            inputId = "position_input_y", 
            label   = "Posición eje y",
            min     = 0,
            max     = 1,
            value   = 0.5,
            step    = 0.1
        )
    ),
    verbatimTextOutput("code") |> card(),
    plotOutput("plot", width = 500) |> card()
)

## Server
server <- function(input, output, session) {
    
    output$code <- renderPrint({
        glue(
            '
            scales_scatter_gg +
                guides(
                    color = guide_legend(
                        position = "inside"
                    )
                ) +
                theme(
                    legend.position.inside = c({input$position_input_x}, {input$position_input_y})'
            )
    })

    ## Plot
    output$plot <- renderPlot({
        gapminder |> 
            filter(year == 2002) |> 
            ggplot(
                aes(x = gdpPercap, y = lifeExp, color = continent)
            ) +
            geom_point(
                size = 2
            ) +
            labs(
                x = "PIB per cápita",
                y = "Esperanza de vida"
            ) +
            scale_color_manual(
                name   = "Continente",
                values = c("#FF5733", "black", "#A833FF", "#3366FF", "#33FF57")
            ) +
            guides(
                color = guide_legend(
                    position = {input$position_input}
                )
            ) +
            theme_bw(base_size = 8) +
            theme(
                legend.position.inside = c(input$position_input_x, input$position_input_y))
            }, res = 96
    )
}

## Run app
shinyApp(ui = ui, server = server)
```
:::

## Gráficos de burbujas

Los gráficos de burbujas son una extensión de los gráficos de dispersión, donde se añade una **tercera variable numérica** que se representa mediante el tamaño de los puntos.

::: callout-note
En la práctica, si utilizamos las estéticas de `color` y `size`, estamos visualizando 4 variables numéricas al mismo tiempo!!
:::

En `ggplot2`, podemos añadir una tercera variable utilizando la estética `size` en la función `aes()`. Al *scatter plot* anterior, vamos a añadirle como variable de `size` la población. Como vamos a añadir nuevos elementos, vamos a añadir el código paso a paso:

::: panel-tabset
## 1. Bubble plot

Empezamos generando un *bubble plot* añadiendo la variable *pop:*

```{r}
## Crear gráfico
bubble_base <- gapminder_tbl |> 
    ggplot(
        aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)
    ) +
    geom_point(
        alpha = 0.7
    ) +
    labs(
        x = "PIB per cápita",
        y = "Esperanza de vida"
    ) +
    scale_color_manual(
        name   = "Continente",
        values = c("#FF5733", "black", "#A833FF", "#3366FF", "#33FF57")
    )
## Imprimir
bubble_base
```

## 2. Tamaño puntos

El tamaño de los puntos al igual que el color de los mismos es una estética. Para modificar una estética mapeada a una variable utilizamos las funciones `scale_*`. Como la estética es `size`, utilizamos `scale_size*()`. En el argumento `range` indicamos el tamaño del punto más pequeño y el tamaño del punto más grande:

```{r}
## Crear gráfico
bubble_size <- bubble_base +
    scale_size(range = c(1, 15))
## Imprimir
bubble_size
```

## 3. Eliminar una leyenda

Recuerdas la función `guides` que vimos antes? Si igualamos una de las estéticas a `"none"` eliminaremos solamente esa leyenda:

```{r}
## Crear gráfico
bubble_guides <- bubble_size +
    guides(
        size = "none"
    )
## Imprimir
bubble_guides
```

## 4. Posicionar leyenda

Para terminar, vamos a posicionar la leyenda del continente en la parte inferior derecha del gráfico para aprovechar el espacio:

```{r}
## Crear gráfico
bubble_final <- bubble_guides +
    guides(
        color = guide_legend(
            position = "inside"
        )
    ) +
    theme(
        legend.position.inside = c(.9, .2)
    ) 
## Imprimir
bubble_final
```

## 5. Resumen

Para terminar, vamos a ver como se vería todo el código en un solo bloque:

```{r}
gapminder_tbl |> 
    ## Capas
    ggplot(
        aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)
    ) +
    geom_point(
        alpha = 0.7
    ) +
    ## Etiquetas
    labs(
        x = "PIB per cápita",
        y = "Esperanza de vida"
    ) +
    ## Escalas y guías
    scale_color_manual(
        name   = "Continente",
        values = c("#FF5733", "black", "#A833FF", "#3366FF", "#33FF57")
    ) +
    scale_size(range = c(1, 15)) +
    guides(
        size  = "none",
        color = guide_legend(
            position = "inside"
        )
    ) +
    ## Temas
    theme(
        legend.position.inside = c(.9, .2)
    ) 
```
:::

Uff 😥... Si es tu primera vez estudiando `{ggplot2}` es posible que te esté explotando la cabeza. No te preocupes!! Es normal que al principio te cueste, pero poco a poco iremos dominándolo juntos😎.

### Ejercicio 7

Es hora de ponerse manos a la obra! El objetivo del siguiente ejercicio es replicar el siguiente gráfico con el *dataset* de `iris`. Recuerda la estructura de los datos:

```{r}
#| echo: false
#| label: tbl-iris-head
#| tbl-cap: Estructura de los datos de Iris
head(iris) |> 
    gt() |> 
    opt_stylize(style = 5)
```

::: panel-tabset
## Gráfico

Intenta replicar este gráfico en la pestaña "Ejercicio"

```{r}
#| echo: false
#| label: fig-distribution-ej7
#| fig-cap: Resultado del ejercicio 7
iris |> 
    ggplot(
        aes(
            x = Petal.Length, 
            y = Petal.Width,
            color = Species,
            size  = Sepal.Length
        )
    ) +
    geom_point() +
    labs(
        title = "Relación entre longitud de pétalo, anchura de pétalo y longitud de sépalo",
        x = "Longitud de pétalo (mm)",
        y = "Anchura de pétalo (mm)"
    ) +
    scale_color_manual(
        name   = "Especies",
        values = c("#FF6347", "#4682B4", "#32CD32")
    ) +
    scale_size(range = c(1, 5)) +
    guides(
        size = "none",
        color = guide_legend(position = "inside")
    ) +
    theme(
        legend.position.inside = c(.1, .8)
    )

```

## Ejercicio

Completar el código:

```{webr-r}
iris |> 
    ## Introducir código
    labs(
        title = "Relación entre longitud de pétalo, anchura de pétalo y longitud de sépalo",
        x = "Longitud de pétalo (mm)",
        y = "Anchura de pétalo (mm)"
    ) 
```

## Solución

```{r}
#| echo: false
#| label: fig-distribution-ej7-sol
#| fig-cap: Solución del ejercicio 7
iris |> 
    ggplot(
        aes(
            x = Petal.Length, 
            y = Petal.Width,
            color = Species,
            size  = Sepal.Length
        )
    ) +
    geom_point() +
    labs(
        title = "Relación entre longitud de pétalo, anchura de pétalo y longitud de sépalo",
        x = "Longitud de pétalo (mm)",
        y = "Anchura de pétalo (mm)"
    ) +
    scale_color_manual(
        name   = "Especies",
        values = c("#FF6347", "#4682B4", "#32CD32")
    ) +
    scale_size(range = c(1, 5)) +
    guides(
        size = "none",
        color = guide_legend(position = "inside")
    ) +
    theme(
        legend.position.inside = c(.1, .8)
    )
```
:::

## Mapas de calor

```{r}
"hello world of heatmaps"
```
