---
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
filters: 
    - webr
webr:
    packages: ["dplyr", "ggplot2"]
---

# Gráficos de relación

Los gráficos de relación son aquellos que nos permiten visualizar la relación que tienen entre sí dos o más variables. Dentro de los gráficos de relación también se puede denominar gráficos de correlación, y agrupan una familia más grande que la que veíamos en la @fig-vis-classification.

En este capítulo veremos los siguientes gráficos de relación:

1.  Gráfico de dispersión (*Scatter plot*)

2.  Gráfico de burbujas (*Bubble plot*)

3.  Mapa de calor (*Heatmap*)

En este capítulo vamos a trabajar con dos datasets:

-   `iris`: se utilizará para los ejemplos utilizados en las explicaciones (ver [Tipos de visualización](#sec-visualization-types){target="_blank"}).

-   `inventario`: serán los datos que utilizarán los alumnos para los ejercicios propuestos (ver @sec-vis-data).

Para comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo.

```{r}
#| include: false
## Paquetes internos
library(ggtext)
```

```{r}
# Cargar paquetes
library(dplyr)
library(readr)
library(ggplot2)
# Cargar datos
inventario_tbl <- read_rds("data/inventario_prep.rds")
```

## Objetivos

Al final de este capítulo serás capaz de:

-   Utilizar un tema distinto por defecto

-   Crear gráficos de dispersión y burbujas

-   Crear mapas de calor

-   Controlar colores utilizando `scales`

-   Mover la leyenda

## Gráficos de dispersión

Antes de emepzar, vamos a ver como modificar el tema que viene por defecto en `{ggplot2}`, para que no tengamos que añadirlo en cada gráfico que hagamos.

Utilizando la función `theme_set()` podemos establecer un tema por defecto para todos los gráficos que hagamos en el documento. En este caso, hemos seleccionado el tema `theme_bw()`, que es uno de los temas más utilizados en `{ggplot2}`.

```{r}
theme_set(
    theme_bw()
)
```

Los gráficos de dispersión son una de las formas más comunes de visualizar la relación entre dos **variables numéricas**. En un gráfico de dispersión, cada punto representa una observación y se coloca en el eje `x` según el valor de la primera variable y en el eje `y` según el valor de la segunda variable.

Para crear un gráfico de dispersión en `ggplot2` se utiliza la función `geom_point()`. A continuación, se muestra un ejemplo de cómo crear un gráfico de dispersión utilizando el *dataset* `iris`.

```{r}
#| label: fig-dispersion-scatter
#| fig-cap: Gráfico de dispersión con ggplot2
## Crear gráfico
base_scatter_gg <- iris |> 
    ggplot(
        aes(x = Petal.Length, y = Petal.Width)
    ) +
    geom_point(
        aes(color = Species),
        size = 2
    )
## Imprimir
base_scatter_gg
```

Fíjate que como hemos utilizado `theme_set()` al principio del documento, no hemos tenido que añadir `theme_bw()` en el gráfico.

Pues así de sencillo es crear un gráfico de dispersión en `ggplot2`. Como ya estamos familiarizados con la funcionalidad básica, vamos a aprender a cambiar los colores de los puntos y a mover la leyenda.

Vamos a empezar modificando los colores de cada una de las especies para que sean:

-   `Iris setosa`: azul oscuro

-   `Iris versicolor`: verde oscuro

-   `Iris virginica`: rojo oscuro

Si recordáis, en la @sec-components-scales veíamos que las variables numéricas traen por defecto una escala continua (i.e. `scale_*_continuous()`) y las variables categóricas una escala de discreta (i.e. `scale_*_discrete()`).

En este caso, queremos cambiar los colores de las especies, y para ello tenemos que modificar la escala a `manual` con la función `scale_color_manual()`. A continuación, se muestra el código para cambiar los colores de las especies:

```{r}
#| label: fig-dispersion-scatter-colors
#| fig-cap: Gráfico de dispersión con ggplot2
## Crear gráfico
scales_scatter_gg <- base_scatter_gg +
    scale_color_manual(
        name   = "Especies",
        values = c("darkblue", "darkgreen", "darkred")
    )
## Imprimir
scales_scatter_gg
```

Con el argumento `name` de las funciones `scale*` podemos cambiar el nombre de la leyenda, y en `values` tenemos que especificar un vector con los colores que queremos asignar a cada categoría.

::: callout-note
En @fig-dispersion-scatter-colors hemos asignado a `values` un vector de longitud 3 porque tenemos 3 categorías (1 por especie). Si asignamos más colores de los necesarios, la función los ignorará, mientras que si asignamos menos, la función nos dará el error: `Insufficient values in manual scale`
:::

Lo siguiente que vamos a aprender es a mover la leyenda. Aquí tenemos dos opciones:

-   Utilizar una posición relativa al gráfico

-   Utilizar una posición absoluta dentro del gráfico

Vamos a utilizar el método introducido en la versión 3.5.0 de `{ggplot2}` que es el siguiente:

::: panel-tabset
## Posición relativa

La posición relativa es la más sencilla. La forma **recomendable** es la siguiente, ya que si tuviéramos más de una leyenda, podríamos controlar la posición de cada una dentro de `guides`.

Lo que estamos haciendo es: (1) utilizar la función `guides`; (2) como argumento utilizar el nombre la estética de la leyenda que queremos modificar (`color`); (3) utilizar la función `guide_legend()` que tiene muchos argumentos para modificar la leyenda.

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

## Load packages
library(bslib)
library(ggplot2)
library(glue)
library(shiny)

## UI
ui <- page_sidebar(
    sidebar = sidebar(
        open = "open",
        width = 200,
        selectInput(
            inputId = "position_input", 
            label   = "Posición", 
            choices = c("bottom", "top", "left", "right", "inside"),
        )
    ),
    verbatimTextOutput("code") |> card(),
    plotOutput("plot", width = 500) |> card()
)

## Server
server <- function(input, output, session) {
    
    output$code <- renderPrint({
        glue(
            '
            scales_scatter_gg +
                guides(
                    color = guide_legend(
                        position = "{input$position_input}"
                    )
                )'
            )
    })

    ## Plot
    output$plot <- renderPlot({
        iris |> 
            ggplot(
                aes(x = Petal.Length, y = Petal.Width)
            ) +
            geom_point(
                aes(color = Species),
                size = 2
            ) +
            scale_color_manual(
                name   = "Especies",
                values = c("darkblue", "darkgreen", "darkred")
            ) +
            guides(
                color = guide_legend(
                    position = {input$position_input}
                )
            ) +
            theme_bw(base_size = 8)
            }, res = 96
    )
}

## Run app
shinyApp(ui = ui, server = server)
```

## Posición absoluta

Para la posición absoluta, debemos utilizar `position = "inside"`. Una vez hecho esto, debemos modificar el argumento `legend.position.inside` dentro de la función `theme()` indicar un vector numérico de longitud 2, donde el primer número indica el % de desplazamiento sobre el eje `x` desde el origen, mientras que el segundo número indica el % de desplazamiento sobre el eje `y`. Prueba a cambiar los valores en la siguiente aplicación para entender su funcionamiento:

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

## Load packages
library(bslib)
library(ggplot2)
library(glue)
library(shiny)

## UI
ui <- page_sidebar(
    sidebar = sidebar(
        open = "open",
        width = 200,
        sliderInput(
            inputId = "position_input_x", 
            label   = "Posición eje x",
            min     = 0,
            max     = 1,
            value   = 0.5,
            step    = 0.1
        ),
        sliderInput(
            inputId = "position_input_y", 
            label   = "Posición eje y",
            min     = 0,
            max     = 1,
            value   = 0.5,
            step    = 0.1
        )
    ),
    verbatimTextOutput("code") |> card(),
    plotOutput("plot", width = 500) |> card()
)

## Server
server <- function(input, output, session) {
    
    output$code <- renderPrint({
        glue(
            '
            scales_scatter_gg +
                guides(
                    color = guide_legend(
                        position = "inside"
                    )
                ) +
                theme(
                    legend.position.inside = c({input$position_input_x}, {input$position_input_y})'
            )
    })

    ## Plot
    output$plot <- renderPlot({
        iris |> 
            ggplot(
                aes(x = x = Petal.Length, y = Petal.Width)
            ) +
            geom_point(
                aes(color = Species),
                size = 2
            ) +
            scale_color_manual(
                name   = "Especies",
                values = c("darkblue", "darkgreen", "darkred")
            ) +
            guides(
                color = guide_legend(
                    position = "inside"
                )
            ) +
            theme_bw(base_size = 8) +
            theme(
                legend.position.inside = c(input$position_input_x, input$position_input_y))
            }, res = 96
    )
}

## Run app
shinyApp(ui = ui, server = server)
```
:::

Yo no soy particularmente fan de utilizar leyendas, sobre todo cuando tenemos dos o tres clases nada más. En estos casos crearía un gráfico como el siguiente, pero para un curso de iniciación es algo bastante complejo de abordar:

```{r}
#| label: fig-dispersion-scatter-no-legend
#| fig-cap: Gráfico de dispersión sin leyenda
#| echo: false
## Texto
txt_title <- "***<span style='color: darkred'>Iris virginica</span>*** tiene los pétalos más grandes, mientras que ***<span style='color: darkblue'>I. setosa</span>*** los más pequeños"
txt_subtitle <- "***<span style='color: darkgreen'>I. versicolor</span>*** es más similar a ***<span style='color: darkred'>Iris virginica</span>***"

ggplot(
    iris,
    aes(x = Petal.Length, y = Petal.Width, color = Species)
) +
    geom_point(
        size = 2,
        show.legend = FALSE
    ) +
    scale_color_manual(
        name   = "Especies",
        values = c("darkblue", "darkgreen", "darkred")
    ) +
    labs(
        title    = txt_title,
        subtitle = txt_subtitle
    ) +
    theme_bw() +
    theme(
        plot.title    = element_markdown(size = rel(1), face = "bold"),
        plot.subtitle = element_markdown()
    )
```


## Mapas de calor
