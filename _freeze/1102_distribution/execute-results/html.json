{
  "hash": "7ea07e12056e7ac0d4e8f737a495918d",
  "result": {
    "engine": "knitr",
    "markdown": "---\n## Base opts\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Gráficos de distribución {#sec-plot-distribution}\n\nLos gráficos de distribución son una forma de visualizar la distribución de los datos. En este tipo de gráficos, se muestra la frecuencia de los valores de una variable o de un conjunto de variables. Los gráficos de distribución son útiles para identificar patrones en los datos, como la presencia de valores atípicos, la simetría de la distribución, la presencia de múltiples modas, entre otros. Generalmente, los gráficos de distribución se utilizan para visualizar **una sola variable numérica** aunque en la @fig-vis-classification se muestra que también es posible visualizar **dos variables numéricas** mediante el uso de gráficos de dispersión (**scatter plot**).\n\nEn este capítulo, veremos los siguientes tipos de gráficos de distribución:\n\n1. Histogramas (**histogram**)\n\n2. Gráficos de densidad (**density plot**)\n\n3. Gráficos de cajas (**box plot**)\n\n4. Gráficos de violín (**violin plot**)\n\n:::callout-info\nLos gráficos de dispersión los veremos dentro del capítulo de gráficos de relación.\n:::\n\nPara comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar paquetes\nlibrary(ggplot2)\nlibrary(readr)\n# Cargar datos\ninventario_tbl <- read_rds(\"data/inventario_prep.rds\")\n```\n:::\n\n\n\n\n\n## Histogramas\n\nLos histogramas son una forma de visualizar la distribución de una variable numérica. En un histograma, los valores de la variable se agrupan en intervalos y se muestra la frecuencia de los valores en cada intervalo. Los histogramas son útiles para identificar la forma de la distribución de los datos, la presencia de valores atípicos y la presencia de múltiples modas.\n\nPara crear un histograma en `ggplot2`, utilizamos la función `geom_histogram()`. Tiene dos argumentos de gran importancia:\n\n- `bins`: número de intervalos en los que se agruparán los datos. Si no se especifica, `{ggplot2}` utilizará 30 intervalos.\n\n- `binwidth`: ancho de los intervalos. Si se especifica, `{ggplot2}` calculará el número de intervalos automáticamente.\n\n:::callout-note\nEstos dos argumentos son mutuamente excluyentes. Si se especifica `bins`, `{ggplot2}` ignorará `binwidth`.\n:::\n\nVamos a ver la diferencia entre estos dos argumentos viendo la distribución diamétrica de los datos de inventario.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 300\n\n## Load packages\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(shiny)\n\n## Load data\ninventario_tbl <- read_rds(\"data/inventario_prep.rds\")\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        sliderInput(\"bins\", \"Número de intervalos\", min = 1, max = 100, value = 30),\n    ),\n    h2(\"Test\"),\n    plotOutput(\"plot\", width = 300),\n    h3(\"OK\")\n)\n\n## Server\nserver <- function(input, output, session) {\n\n    \n    \n    ## React\n    histogram_r <- reactive({\n        ggplot(inventario_tbl, aes(x = dbh_mm / 10)) +\n            geom_histogram(bins = input$bins, fill = \"#0073C2FF\", color = \"white\") +\n            labs(title = \"Distribución diamétrica\", x = \"DBH (cm)\", y = \"Frecuencia\")\n    \n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        histogram_r()\n    }, res = 96)\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "1102_distribution_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}