{
  "hash": "768e18cc35f27b65e59306498e55ab20",
  "result": {
    "engine": "knitr",
    "markdown": "---\n## Base opts\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\n## Extensions\nfilters: \n    - webr\nwebr:\n    packages: [\"ggplot2\"]\n---\n\n\n\n\n# Gr√°ficos de distribuci√≥n {#sec-plot-distribution}\n\nLos gr√°ficos de distribuci√≥n son una forma de visualizar la distribuci√≥n de los datos. En este tipo de gr√°ficos, se muestra la frecuencia de los valores de una variable o de un conjunto de variables. Los gr√°ficos de distribuci√≥n son √∫tiles para identificar patrones en los datos, como la presencia de valores at√≠picos, la simetr√≠a de la distribuci√≥n, la presencia de m√∫ltiples modas, entre otros. Generalmente, los gr√°ficos de distribuci√≥n se utilizan para visualizar **una sola variable num√©rica** aunque en la @fig-vis-classification se muestra que tambi√©n es posible visualizar **dos variables num√©ricas** mediante el uso de gr√°ficos de dispersi√≥n (**scatter plot**).\n\nEn este cap√≠tulo, veremos los siguientes tipos de gr√°ficos de distribuci√≥n:\n\n1.  Histogramas (**histogram**)\n\n2.  Gr√°ficos de densidad (**density plot**)\n\n3.  Gr√°ficos de cajas (**box plot**)\n\n4.  Gr√°ficos de viol√≠n (**violin plot**)\n\n::: callout-info\nLos gr√°ficos de dispersi√≥n los veremos dentro del cap√≠tulo de gr√°ficos de relaci√≥n.\n:::\n\nEn este cap√≠tulo vamos a trabajar con dos datasets:\n\n-   `iris`: se utilizar√° para los ejemplos utilizados en las explicaciones (ver [Tipos de visualizaci√≥n](#sec-visualization-types){target=\"_blank\"}).\n\n-   `inventario`: ser√°n los datos que utilizar√°n los alumnos para los ejercicios propuestos (ver @sec-vis-data).\n\nPara comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este cap√≠tulo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar paquetes\nlibrary(readr)\nlibrary(ggplot2)\n# Cargar datos\ninventario_tbl <- read_rds(\"data/inventario_prep.rds\")\n```\n:::\n\n\n\n\n## Objetivos\n\nAl final de este cap√≠tulo, ser√°s capaz de:\n\n-   Crear histogramas en `{ggplot2}`\n\n-   Crear gr√°ficos de densidad en `{ggplot2}`\n\n-   Crear gr√°ficos de cajas en `{ggplot2}`\n\n-   Crear gr√°ficos de viol√≠n en `{ggplot2}`\n\n-   Utilizar etiquetas y temas predise√±ados en `{ggplot2}`\n\n## Histogramas\n\nLos histogramas son una forma de visualizar la distribuci√≥n de una variable num√©rica. En un histograma, los valores de la variable se agrupan en intervalos y se muestra la frecuencia de los valores en cada intervalo. Los histogramas son √∫tiles para identificar la forma de la distribuci√≥n de los datos, la presencia de valores at√≠picos y la presencia de m√∫ltiples modas.\n\nPara crear un histograma en `ggplot2`, utilizamos la funci√≥n `geom_histogram()`. Tiene dos argumentos de gran importancia:\n\n-   `bins`: n√∫mero de intervalos en los que se agrupar√°n los datos. Si no se especifica, `{ggplot2}` utilizar√° 30 intervalos.\n\n-   `binwidth`: ancho de los intervalos. Si se especifica, `{ggplot2}` calcular√° el n√∫mero de intervalos autom√°ticamente.\n\n::: callout-note\nEstos dos argumentos son mutuamente excluyentes. Si se especifica `bins`, `{ggplot2}` ignorar√° `binwidth`.\n:::\n\nVamos a ver la diferencia entre estos dos argumentos viendo la distribuci√≥n de la longitud de los p√©talos de las flores del dataset `iris`:\n\n::: panel-tabset\n## N√∫mero de intervalos\n\nAl especificar el n√∫mero de intervalos lo que hacemos es b√°sicamente indicar el n√∫mero de barras que queremos generar:\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n\n## Load packages\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        sliderInput(\"bins\", \"N√∫mero de intervalos\", min = 1, max = 30, value = 15),\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            'ggplot(iris, aes(x = Petal.Length)) +\n                    geom_histogram(bins = {input$bins}, fill = \"#0073C2FF\", color = \"white\") +\n                    labs(\n                        title = \"Distribuci√≥n de longitud del p√©talo\", \n                        x = \"Longitud (mm)\", \n                        y = \"Frecuencia\"\n                    )'\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        ggplot(iris, aes(x = Petal.Length)) +\n            geom_histogram(bins = input$bins, fill = \"#0073C2FF\", color = \"white\") +\n            labs(\n                title = \"Distribuci√≥n de longitud del p√©talo\", \n                x = \"Longitud (cm)\", \n                y = \"Frecuencia\"\n            ) +\n            theme_gray(base_size = 8)\n    }, res = 96)\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n\n## Ancho del intervalo\n\nCuando seleccionamos el ancho del intervalo (*binwidth*), estamos seleccionando el tama√±o del intervalo en las unidades de la variable que estamos evaluando. Por ejemplo, si seleccionamos un ancho de banda de 0.3 para la longitud del p√©talo, estamos indicando que cada barra agrupar√° observaciones de 3 en 3 mil√≠metros. De 0-0.3 tendremos el primer intervalo, de 0.3-0.6 el segundo, y as√≠ sucesivamente.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n\n## Load packages\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        sliderInput(\"bins\", \"Ancho del intervalo\", min = 0.1, max = 2, value = .2, step = .1),\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            ggplot(iris, aes(x = Petal.Length)) +\n                    geom_histogram(binwidth = {input$bins}, fill = \"#0073C2FF\", color = \"white\") +\n                    labs(\n                        title = \"Distribuci√≥n de longitud del p√©talo\", \n                        x = \"Longitud (mm)\", \n                        y = \"Frecuencia\"\n                    )'\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        ggplot(iris, aes(x = Petal.Length)) +\n            geom_histogram(binwidth = input$bins, fill = \"#0073C2FF\", color = \"white\") +\n            labs(\n                title = \"Distribuci√≥n de longitud del p√©talo\", \n                x     = \"Longitud (mm)\", \n                y     = \"Frecuencia\"\n            ) +\n            theme_gray(base_size = 8)\n    }, res = 96)\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n:::\n\nUn histograma es b√°sicamente esto. Para el color de relleno utilizamos el argumento `fill` y para el color del contorno utilizamos el argumento `color`, y este patr√≥n seguir√° siendo el mismo para los otros tipos de gr√°ficos de `{ggplot2}`.\n\nTambi√©n te habr√°s dado cuenta que hemos a√±adido una funci√≥n nueva que es `labs()`. Esta funci√≥n nos permite a√±adir etiquetas al gr√°fico como:\n\n-   `title`: t√≠tulo del gr√°fico.\n\n-   `subtitle`: subtitulo del gr√°fico.\n\n-   `x`: t√≠tulo del eje x.\n\n-   `y`: t√≠tulo del eje y.\n\n-   `caption`: pie de figura.\n\nSi bien es cierto que los histogramas son una forma de visualizar la distribuci√≥n de una sola variable, tambi√©n podemos crear histogramas para comparar la distribuci√≥n de una variable num√©rica entre diferentes grupos. Esto puede ser muy conveniente, ya que si nos fijamos en las figuras anteriores, podemos ver que si indicamos el n√∫mero de intervalos adecuado sigue una [distribuci√≥n bimodal](#0){target=\"_blank\"}.\n\nVamos a ver qu√© pasa si comparamos la distribuci√≥n de la longitud de los p√©talos de las flores del *dataset* `iris` entre las diferentes especies de flores. Para ello, utilizamos el argumento `fill` en la funci√≥n `aes()` para indicar la variable categ√≥rica que queremos comparar:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Petal.Length, fill = Species)) +\n    geom_histogram(bins = 30, color = \"white\") +\n    labs(\n        title    = \"Distribuci√≥n de longitud del p√©talo por especie\", \n        subtitle = \"La especie I. setosa tiene una longitud de p√©talo menor que I. versicolor e I. virginica\",\n        x        = \"Longitud (mm)\", \n        y        = \"Frecuencia\",\n        caption  = \"Autor: Adri√°n Cidre\"\n    ) +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![Distribuci√≥n de longitud del p√©talo por especie](1102_distribution_files/figure-html/fig-distribution-species-1.png){#fig-distribution-species width=672}\n:::\n:::\n\n\n\n\nAh√° ü§î! Gracias a utilizar una est√©tica m√°s podemos ver que la distribuci√≥n no es bimodal, si no que son distribuciones de especies de flores distintas. En esencia, a√±adir una est√©tica m√°s puede ser visto como a√±adir una dimensi√≥n m√°s al gr√°fico.\n\n::: callout-note\nA partir de ahora vamos a ir a√±adiendo nuevas funciones y argumentos a nuestros gr√°ficos. No te preocupes si no entiendes todo a la primera, poco a poco iremos viendo c√≥mo se utilizan y para qu√© sirven. En este caso hemos a√±adido `theme_minimal()` que nos permite cambiar el tema base del gr√°fico. Existen una serie de temas predefinidos que empiezan por `theme_*()`.\n:::\n\n## Gr√°ficos de densidad\n\nLos gr√°ficos de densidad son una forma de visualizar la distribuci√≥n de una variable num√©rica. A diferencia de los histogramas, los gr√°ficos de densidad no agrupan los datos en intervalos, sino que muestran la estimaci√≥n de densidad kernel de los datos. Los gr√°ficos de densidad son √∫tiles para identificar la forma de la distribuci√≥n de los datos, ya que son una versi√≥n suavizada de los histogramas.\n\nPara crear un gr√°fico de densidad en `{ggplot2}`, utilizamos la funci√≥n `geom_density()`. B√°sicamente, se va a generar una l√≠nea que nos va a indicar la densidad de probabilidad de los datos. Como es una l√≠nea, tiene una serie de est√©ticas que podemos modificar a continuaci√≥n:\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n\n## Load packages\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open  = \"open\",\n        width = 200,\n        selectInput(\n            inputId  = \"linetype_input\",\n            label    = \"Linetype\",\n            choices  = c(\"solid\", \"dashed\", \"dotted\",\n                         \"dotdash\", \"longdash\", \"twodash\"),\n            selected = \"solid\"\n        ),\n        sliderInput(\n            inputId = \"linewidth_input\",\n            label   = \"Linewidth\",\n            min     = 0,\n            max     = 4,\n            value   = 1,\n            step    = .5\n        ),\n        checkboxInput(\n            inputId = \"fill_input\",\n            label   = \"Rellenar?\",\n            value   = FALSE\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        \n        if (input$fill_input) {\n            glue(\n            'ggplot(iris, aes(x = Petal.Length)) +\n                geom_density(\n                    color     = \"darkred\",\n                    fill      = \"gray30\",\n                    linetype  = \"{input$linetype_input}\",\n                    linewidth = {input$linewidth_input}\n                ) +\n                labs(\n                    title = \"Distribuci√≥n de longitud del p√©talo\", \n                    x     = \"Longitud (mm)\", \n                    y     = \"Probabilidad (%)\"\n                ) +\n                theme_bw(base_size = 8)'\n            )\n        } else {\n            glue(\n            'ggplot(iris, aes(x = Petal.Length)) +\n                geom_density(\n                    color     = \"darkred\",\n                    linetype  = \"{input$linetype_input}\",\n                    linewidth = {input$linewidth_input}\n                ) +\n                labs(\n                    title = \"Distribuci√≥n de longitud del p√©talo\", \n                    x     = \"Longitud (mm)\", \n                    y     = \"Probabilidad (%)\"\n                ) +\n                theme_bw()'\n            )\n        }\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        ggplot(iris, aes(x = Petal.Length)) +\n            geom_density(\n                color     = \"darkred\",\n                linetype  = input$linetype_input,\n                linewidth = input$linewidth_input,\n                fill      = if (input$fill_input) \"gray30\" else NA\n            ) +\n            labs(\n                title = \"Distribuci√≥n de longitud del p√©talo\", \n                x     = \"Longitud (mm)\", \n                y     = \"Probabilidad (%)\"\n            ) +\n            theme_bw(base_size = 8)\n    }, res = 96)\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n\n### Ejercicio 1\n\nFinalmente, al igual que con los histogramas, podemos comparar la distribuci√≥n de la longitud del p√©talo entre las diferentes especies de flores del *dataset* `iris`. Te atreves a intentar a√±adir la parte del c√≥digo que falta? El resultado deber√≠a ser el indicado en la @fig-distribution-ej1:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Resultado del ejercicio 1](1102_distribution_files/figure-html/fig-distribution-ej1-1.png){#fig-distribution-ej1 width=672}\n:::\n:::\n\n\n\n\nEn total hay que a√±adir tres elementos:\n\n-   Transparencia (necesaria para poder ver la superposici√≥n de densidades)\n\n-   Eliminar color de contorno\n\n-   Crear un gr√°fico de densidad por especie dentro del mismo gr√°fico\n\n::: panel-tabset\n## Ejercicio\n\n```{webr-r}\nggplot(iris, aes(x = Petal.Length)) +\n    geom_density() +\n    labs(\n        title = \"Distribuci√≥n de longitud del p√©talo\",\n        x     = \"Longitud (mm)\", \n        y     = \"Probabilidad (%)\"\n    ) +\n    theme_bw()\n```\n\n## Soluci√≥n\n\nEl argumento `aes(fill = Species)` tambi√©n se puede introducir en la funci√≥n `ggplot()`.\n\n```{.r}\nggplot(iris, aes(x = Petal.Length)) +\n    geom_density(\n        aes(fill = Species),\n        color    = NA,\n        alpha    = .8\n    ) +\n    labs(\n        title = \"Distribuci√≥n de longitud del p√©talo\",\n        x     = \"Longitud (mm)\", \n        y     = \"Probabilidad (%)\"\n    ) +\n    theme_bw()\n```\n:::\n",
    "supporting": [
      "1102_distribution_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}