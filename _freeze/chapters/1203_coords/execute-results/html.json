{
  "hash": "1973fe8c00c18fa28d4a72b8947f4f9b",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\nfilters: \n    - webr\nwebr:\n    packages: [\"dplyr\", \"ggplot2\"]\n---\n\n\n\n\n# Sistemas de Coordenadas {#sec-coords}\n\nLos sistemas de coordenadas se encargan de combinar las estéticas de posición (x, y) para crear un gráfico en dos dimensiones. Estas controlan aspectos como:\n\n-   La escala de los ejes.\n\n-   La proyección de los datos.\n\n-   La orientación de los ejes.\n\nEn general, se pueden dividir los sistemas de coordenadas en dos grupos [@book-ggplot2]:\n\n-   **Lineares**: mantienen la forma de las geometrías.\n\n-   **No lineares**: modifican la forma de las geometrías.\n\nEn este capítulo vamos a trabajar con dos *datasets*:\n\n-   `iris`: *dataset* donde se han medido la longitud y anchura de pétalos y sépalos de 150 flores, además de la especie a la que pertenecen (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}).\n\n-   `inventario`: *dataset* con datos de inventario de 27 parcelas en los que se ha medido el DBH, altura y especie (ver @sec-vis-data).\n\nPara comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(patchwork)\n```\n:::\n\n\n\n\n## Sistemas lineares\n\nTenemos tres funciones principales para trabajar con sistemas de coordenadas lineales. Una de estas, es la que viene por defecto en `{ggplot2}` que es `coord_cartesian()`. Vamos a partir del siguiente gráfico:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot_base <- iris |> \n    ggplot(aes(x = Species, y = Sepal.Width)) +\n    geom_boxplot(\n        width = .2\n    ) +\n    theme_bw() +\n    labs(\n        x = NULL,\n        y = \"Ancho del sépalo (mm)\"\n    )\n\nboxplot_base\n```\n\n::: {.cell-output-display}\n![Distribución del ancho del sépalo](1203_coords_files/figure-html/fig-coord-cartesian-1.png){#fig-coord-cartesian width=672}\n:::\n:::\n\n\n\n\nEn el siguiente *tabset*, vamos a ver la función `coord_cartesian()` y cómo se puede utilizar para modificar los límites de los ejes.\n\n::: panel-tabset\n## Coord cartesian\n\nVamos a empezar comprobando que al añadir `coord_cartesian()` nada cambia:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot_base +\n    coord_cartesian()\n```\n\n::: {.cell-output-display}\n![](1203_coords_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n## Zoom\n\nMediante lo argumentos `xlim` e `ylim` podemos hacer zoom a una parte del gráfico. Esto difiere de la forma que vimos con las escalas en que aquí no se desechan los datos. Esto quiere decir que:\n\n-   `coord_*(xlim, ylim)`: se hace zoom a una zona del gráfico\n\n-   `scale_*_continuous(limits)`: se eliminan los datos fuera de los límites, y se recalcula el gráfico sin esos datos.\n\nA continuación puedes ver un ejemplo donde en el primer caso se hace zoom real, mientras que en el segundo caso se recalculan los boxplot para ese área concreta.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng1 <- boxplot_base +\n    coord_cartesian(\n        ylim = c(2.5, 3)\n    ) +\n    ggtitle(\"Modifica coord_cartesian()\")\n\ng2 <- boxplot_base +\n    scale_y_continuous(\n       limits = c(2.5, 3) \n    ) +\n    ggtitle(\"Modifica scale_y_continuous()\")\n\ng1 + g2\n```\n\n::: {.cell-output-display}\n![](1203_coords_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## Expansión\n\nPor defecto, se añade un pequeño espacio antes y después de los valores más bajos y altos de `x` e `y`. Podemos eliminarlo con `expand = FALSE`, aunque en muchos casos esto no es nada útil:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot_base +\n    coord_cartesian(\n        expand = F\n    )\n```\n\n::: {.cell-output-display}\n![](1203_coords_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Voltear los ejes\n\nAunque lo podemos hacer de forma manual en la mayoría de las ocasiones, tenemos una función que nos permite voltear los ejes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot_base +\n    coord_flip()\n```\n\n::: {.cell-output-display}\n![](1203_coords_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n## Escalas fijas\n\nEn este caso, una unidad del eje `x` es igual a una unidad del eje `y`. Esto es útil especialmente cuando las variables tienen la mismas unidades.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot_base +\n    coord_fixed()\n```\n\n::: {.cell-output-display}\n![](1203_coords_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## Ratio\n\nTambién podemos modificar este ratio. En la siguiente figura, dos unidades del eje `x` son iguales a una unidad del eje `y`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot_base +\n    coord_fixed(\n        ratio = 2\n    )\n```\n\n::: {.cell-output-display}\n![](1203_coords_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\nY esto sería prácticamente todo lo que podemos hacer con los sistemas de coordenadas lineares.\n\n## Sistemas no lineares\n\nEstos sistemas puedes modificar la forma de las geometrías. Estos los utilizarás como menos frecuencia y en situaciones muy concretas. La función `coord_polar()` es la que nos permite crear los endemoniados gráficos circulares. Vamos a ver un ejemplo de lo que nunca debes hacer:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n    ggplot(aes(x = Species, fill = Species)) +\n    geom_bar(width = 1) +\n    coord_polar()\n```\n\n::: {.cell-output-display}\n![](1203_coords_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nExisten otras funciones que nos permiten crear sistemas no lineares. La más importante es `coord_sf()` que nos permite crear proyecciones de mapas. No obstante, esto queda fuera de los objetivos de este curso, así que no profundizaremos en ello.\n\n## Resumen\n\nEn este capítulo hemos visto cómo modificar los sistemas de coordenadas en `{ggplot2}`. Hemos visto cómo modificar los límites de los ejes, hacer zoom, voltear los ejes, fijar las escalas y modificar el ratio entre los ejes. Existen otras funciones que nos permiten crear sistemas no lineales, como `coord_polar()` para crear gráficos circulares y `coord_sf()` para proyecciones de mapas.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "1203_coords_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}