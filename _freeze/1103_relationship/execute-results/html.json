{
  "hash": "3496a56e8c505ad51939d3e7c26f0a92",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\nfilters: \n    - webr\nwebr:\n    packages: [\"dplyr\", \"ggplot2\"]\n---\n\n\n\n\n# Gráficos de relación\n\nLos gráficos de relación son aquellos que nos permiten visualizar la relación que tienen entre sí dos o más variables. Dentro de los gráficos de relación también se puede denominar gráficos de correlación, y agrupan una familia más grande que la que veíamos en la @fig-vis-classification.\n\nEn este capítulo veremos los siguientes gráficos de relación:\n\n1.  Gráfico de dispersión (*Scatter plot*)\n\n2.  Gráfico de burbujas (*Bubble plot*)\n\n3.  Mapa de calor (*Heatmap*)\n\nEn este capítulo vamos a trabajar con dos datasets:\n\n-   `iris`: se utilizará para los ejemplos utilizados en las explicaciones (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}). <!--# eliminar? -->\n\n-   `gapminder`: se utilizará para los ejemplos utilizados en las explicaciones (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}). Filtraremos solamente los datos del 2002.\n\n-   `inventario`: serán los datos que utilizarán los alumnos para los ejercicios propuestos (ver @sec-vis-data).\n\nPara comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar paquetes\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(ggplot2)\nlibrary(readr)\n# Cargar datos\ninventario_tbl <- read_rds(\"data/inventario_prep.rds\")\ngapminder_tbl <- gapminder |> \n    filter(year == 2002)\n```\n:::\n\n\n\n\n## Objetivos\n\nAl final de este capítulo serás capaz de:\n\n-   Utilizar un tema distinto por defecto\n\n-   Crear gráficos de dispersión y burbujas\n\n-   Crear mapas de calor\n\n-   Controlar colores utilizando `scales`\n\n-   Mover la leyenda\n\n## Gráficos de dispersión\n\nAntes de empezar, vamos a ver como modificar el tema que viene por defecto en `{ggplot2}`, para que no tengamos que añadirlo en cada gráfico que hagamos.\n\nUtilizando la función `theme_set()` podemos establecer un tema por defecto para todos los gráficos que hagamos en el documento. En este caso, hemos seleccionado el tema `theme_classic()`, que es uno de los temas más utilizados en `{ggplot2}`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(\n    theme_classic()\n)\n```\n:::\n\n\n\n\nLos gráficos de dispersión son una de las formas más comunes de visualizar la relación entre dos **variables numéricas**. En un gráfico de dispersión, cada punto representa una observación y se coloca en el eje `x` según el valor de la primera variable y en el eje `y` según el valor de la segunda variable.\n\nPara crear un gráfico de dispersión en `ggplot2` se utiliza la función `geom_point()`. A continuación, se muestra un ejemplo de cómo crear un gráfico de dispersión utilizando el *dataset* `gapminder` relacionando el PIB per cápita con la esperanza de vida, y coloreando los puntos según el continente.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbase_scatter_gg <- gapminder_tbl |> \n    ggplot(\n        aes(x = gdpPercap, y = lifeExp, color = continent)\n    ) +\n    geom_point(\n        size = 2\n    ) +\n    labs(\n        x = \"PIB per cápita\",\n        y = \"Esperanza de vida\"\n    )\n## Imprimir\nbase_scatter_gg\n```\n\n::: {.cell-output-display}\n![Gráfico de dispersión con ggplot2](1103_relationship_files/figure-html/fig-dispersion-scatter-1.png){#fig-dispersion-scatter width=672}\n:::\n:::\n\n\n\n\nFíjate que como hemos utilizado `theme_set()` al principio del documento, no hemos tenido que añadir `theme_classic()` en el gráfico.\n\nPues así de sencillo es crear un gráfico de dispersión en `ggplot2`. Como ya estamos familiarizados con la funcionalidad básica, vamos a aprender a cambiar los colores de los puntos y a mover la leyenda.\n\nVamos a empezar modificando los colores de cada uno de los continentes para que sean:\n\n-   `África`: naranja\n\n-   `América`: negro\n\n-   `Asia`: lila\n\n-   `Europa`: azul\n\n-   `Oceanía`: verde\n\nSi recordáis, en la @sec-components-scales veíamos que las variables numéricas traen por defecto una escala continua (i.e. `scale_*_continuous()`) y las variables categóricas una escala de discreta (i.e. `scale_*_discrete()`).\n\nEn este caso, queremos cambiar los colores de las especies, y para ello tenemos que modificar la escala a `manual` con la función `scale_color_manual()`. A continuación, se muestra el código para cambiar los colores de las especies:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nscales_scatter_gg <- base_scatter_gg +\n    scale_color_manual(\n        name   = \"Continente\",\n        values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n    )\n## Imprimir\nscales_scatter_gg\n```\n\n::: {.cell-output-display}\n![Gráfico de dispersión con ggplot2](1103_relationship_files/figure-html/fig-dispersion-scatter-colors-1.png){#fig-dispersion-scatter-colors width=672}\n:::\n:::\n\n\n\n\nCon el argumento `name` de las funciones `scale*` podemos cambiar el nombre de la leyenda, y en `values` tenemos que especificar un vector con los colores que queremos asignar a cada categoría.\n\n::: callout-note\nEn @fig-dispersion-scatter-colors hemos asignado a `values` un vector de longitud 5 porque tenemos 5 categorías (1 por continente). Si asignamos más colores de los necesarios, la función los ignorará, mientras que si asignamos menos, la función nos dará el error: *`Insufficient values in manual scale`*\n:::\n\nLo siguiente que vamos a aprender es a mover la leyenda. Aquí tenemos dos opciones:\n\n-   Utilizar una posición relativa al gráfico\n\n-   Utilizar una posición absoluta dentro del gráfico\n\nVamos a utilizar el método introducido en la versión 3.5.0 de `{ggplot2}` que es el siguiente:\n\n::: panel-tabset\n## Posición relativa\n\nLa posición relativa es la más sencilla. La forma **recomendable** es la siguiente, ya que si tuviéramos más de una leyenda, podríamos controlar la posición de cada una dentro de `guides`.\n\nLo que estamos haciendo es: (1) utilizar la función `guides`; (2) como argumento utilizar el nombre la estética de la leyenda que queremos modificar (`color`); (3) utilizar la función `guide_legend()` que tiene muchos argumentos para modificar la leyenda.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\n## Load packages\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        selectInput(\n            inputId = \"position_input\", \n            label   = \"Posición\", \n            choices = c(\"bottom\", \"top\", \"left\", \"right\", \"inside\"),\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            scales_scatter_gg +\n                guides(\n                    color = guide_legend(\n                        position = \"{input$position_input}\"\n                    )\n                )'\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        gapminder |> \n            filter(year == 2002) |> \n            ggplot(\n                aes(x = gdpPercap, y = lifeExp, color = continent)\n            ) +\n            geom_point(\n                size = 2\n            ) +\n            labs(\n                x = \"PIB per cápita\",\n                y = \"Esperanza de vida\"\n            ) +\n            scale_color_manual(\n                name   = \"Continente\",\n                values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n            ) +\n            guides(\n                color = guide_legend(\n                    position = {input$position_input}\n                )\n            ) +\n            theme_bw(base_size = 8)\n        }, res = 96\n    )\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n\n## Posición absoluta\n\nPara la posición absoluta, debemos utilizar `position = \"inside\"`. Una vez hecho esto, debemos modificar el argumento `legend.position.inside` dentro de la función `theme()` indicar un vector numérico de longitud 2, donde el primer número indica el % de desplazamiento sobre el eje `x` desde el origen, mientras que el segundo número indica el % de desplazamiento sobre el eje `y`. Prueba a cambiar los valores en la siguiente aplicación para entender su funcionamiento:\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\n## Load packages\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        sliderInput(\n            inputId = \"position_input_x\", \n            label   = \"Posición eje x\",\n            min     = 0,\n            max     = 1,\n            value   = 0.5,\n            step    = 0.1\n        ),\n        sliderInput(\n            inputId = \"position_input_y\", \n            label   = \"Posición eje y\",\n            min     = 0,\n            max     = 1,\n            value   = 0.5,\n            step    = 0.1\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            scales_scatter_gg +\n                guides(\n                    color = guide_legend(\n                        position = \"inside\"\n                    )\n                ) +\n                theme(\n                    legend.position.inside = c({input$position_input_x}, {input$position_input_y})'\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        gapminder |> \n            filter(year == 2002) |> \n            ggplot(\n                aes(x = gdpPercap, y = lifeExp, color = continent)\n            ) +\n            geom_point(\n                size = 2\n            ) +\n            labs(\n                x = \"PIB per cápita\",\n                y = \"Esperanza de vida\"\n            ) +\n            scale_color_manual(\n                name   = \"Continente\",\n                values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n            ) +\n            guides(\n                color = guide_legend(\n                    position = {input$position_input}\n                )\n            ) +\n            theme_bw(base_size = 8) +\n            theme(\n                legend.position.inside = c(input$position_input_x, input$position_input_y))\n            }, res = 96\n    )\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n## Gráficos de burbujas\n\nLos gráficos de burbujas son una extensión de los gráficos de dispersión, donde se añade una **tercera variable numérica** que se representa mediante el tamaño de los puntos.\n\n::: callout-note\nEn la práctica, si utilizamos las estéticas de `color` y `size`, estamos visualizando 4 variables numéricas al mismo tiempo!!\n:::\n\nEn `ggplot2`, podemos añadir una tercera variable utilizando la estética `size` en la función `aes()`. Al *scatter plot* anterior, vamos a añadirle como variable de `size` la población. Como vamos a añadir nuevos elementos, vamos a añadir el código paso a paso:\n\n::: panel-tabset\n## 1. Bubble plot\n\nEmpezamos generando un *bubble plot* añadiendo la variable *pop:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbubble_base <- gapminder_tbl |> \n    ggplot(\n        aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)\n    ) +\n    geom_point(\n        alpha = 0.7\n    ) +\n    labs(\n        x = \"PIB per cápita\",\n        y = \"Esperanza de vida\"\n    ) +\n    scale_color_manual(\n        name   = \"Continente\",\n        values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n    )\n## Imprimir\nbubble_base\n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n## 2. Tamaño puntos\n\nEl tamaño de los puntos al igual que el color de los mismos es una estética. Para modificar una estética mapeada a una variable utilizamos las funciones `scale_*`. Como la estética es `size`, utilizamos `scale_size*()`. En el argumento `range` indicamos el tamaño del punto más pequeño y el tamaño del punto más grande:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbubble_size <- bubble_base +\n    scale_size(range = c(1, 15))\n## Imprimir\nbubble_size\n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## 3. Eliminar una leyenda\n\nRecuerdas la función `guides` que vimos antes? Si igualamos una de las estéticas a `\"none\"` eliminaremos solamente esa leyenda:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbubble_guides <- bubble_size +\n    guides(\n        size = \"none\"\n    )\n## Imprimir\nbubble_guides\n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## 4. Posicionar leyenda\n\nPara terminar, vamos a posicionar la leyenda del continente en la parte inferior derecha del gráfico para aprovechar el espacio:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbubble_final <- bubble_guides +\n    guides(\n        color = guide_legend(\n            position = \"inside\"\n        )\n    ) +\n    theme(\n        legend.position.inside = c(.9, .2)\n    ) \n## Imprimir\nbubble_final\n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## 5. Resumen\n\nPara terminar, vamos a ver como se vería todo el código en un solo bloque:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_tbl |> \n    ## Capas\n    ggplot(\n        aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)\n    ) +\n    geom_point(\n        alpha = 0.7\n    ) +\n    ## Etiquetas\n    labs(\n        x = \"PIB per cápita\",\n        y = \"Esperanza de vida\"\n    ) +\n    ## Escalas y guías\n    scale_color_manual(\n        name   = \"Continente\",\n        values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n    ) +\n    scale_size(range = c(1, 15)) +\n    guides(\n        size  = \"none\",\n        color = guide_legend(\n            position = \"inside\"\n        )\n    ) +\n    ## Temas\n    theme(\n        legend.position.inside = c(.9, .2)\n    ) \n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\nUff 😥... Si es tu primera vez estudiando `{ggplot2}` es posible que te esté explotando la cabeza. No te preocupes!! Es normal que al principio te cueste, pero poco a poco iremos dominándolo juntos😎.\n\n### Ejercicio 7\n\nEs hora de ponerse manos a la obra! El objetivo del siguiente ejercicio es replicar el siguiente gráfico con el *dataset* de `iris`:\n\n::: panel-tabset\n## Gráfico\n\nIntenta replicar este gráfico en la pestaña \"Ejercicio\"\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Resultado del ejercicio 7](1103_relationship_files/figure-html/fig-distribution-ej7-1.png){#fig-distribution-ej7 width=672}\n:::\n:::\n\n\n\n\n## Ejercicio\n\nCompletar el código:\n\n```{webr-r}\niris |> \n    ## Introducir código\n    labs(\n        title = \"Relación entre longitud de pétalo, anchura de pétalo y longitud de sépalo\",\n        x = \"Longitud de pétalo (mm)\",\n        y = \"Anchura de pétalo (mm)\"\n    ) \n```\n\n## Solución\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Solución del ejercicio 7](1103_relationship_files/figure-html/fig-distribution-ej7-sol-1.png){#fig-distribution-ej7-sol width=672}\n:::\n:::\n\n\n\n:::\n\n## Mapas de calor\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"hello\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello\"\n```\n\n\n:::\n:::\n",
    "supporting": [
      "1103_relationship_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}