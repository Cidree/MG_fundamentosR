{
  "hash": "9a66dae636f3b0fb57bba73f28c21623",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\nfilters: \n    - webr\nwebr:\n    packages: [\"dplyr\", \"ggplot2\"]\n---\n\n\n\n\n# Gráficos de relación\n\nLos gráficos de relación son aquellos que nos permiten visualizar la relación que tienen entre sí dos o más variables. Dentro de los gráficos de relación también se puede denominar gráficos de correlación, y agrupan una familia más grande que la que veíamos en la @fig-vis-classification.\n\nEn este capítulo veremos los siguientes gráficos de relación:\n\n1.  Gráfico de dispersión (*Scatter plot*)\n\n2.  Gráfico de burbujas (*Bubble plot*)\n\n3.  Mapa de calor (*Heatmap*)\n\nEn este capítulo vamos a trabajar con dos datasets:\n\n-   `iris`: se utilizará para los ejemplos utilizados en las explicaciones (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}).\n\n-   `inventario`: serán los datos que utilizarán los alumnos para los ejercicios propuestos (ver @sec-vis-data).\n\nPara comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar paquetes\nlibrary(dplyr)\nlibrary(readr)\nlibrary(ggplot2)\n# Cargar datos\ninventario_tbl <- read_rds(\"data/inventario_prep.rds\")\n```\n:::\n\n\n\n\n## Objetivos\n\nAl final de este capítulo serás capaz de:\n\n-   Utilizar un tema distinto por defecto\n\n-   Crear gráficos de dispersión y burbujas\n\n-   Crear mapas de calor\n\n-   Controlar colores utilizando `scales`\n\n-   Mover la leyenda\n\n## Gráficos de dispersión\n\nAntes de emepzar, vamos a ver como modificar el tema que viene por defecto en `{ggplot2}`, para que no tengamos que añadirlo en cada gráfico que hagamos.\n\nUtilizando la función `theme_set()` podemos establecer un tema por defecto para todos los gráficos que hagamos en el documento. En este caso, hemos seleccionado el tema `theme_bw()`, que es uno de los temas más utilizados en `{ggplot2}`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(\n    theme_bw()\n)\n```\n:::\n\n\n\n\nLos gráficos de dispersión son una de las formas más comunes de visualizar la relación entre dos **variables numéricas**. En un gráfico de dispersión, cada punto representa una observación y se coloca en el eje `x` según el valor de la primera variable y en el eje `y` según el valor de la segunda variable.\n\nPara crear un gráfico de dispersión en `ggplot2` se utiliza la función `geom_point()`. A continuación, se muestra un ejemplo de cómo crear un gráfico de dispersión utilizando el *dataset* `iris`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbase_scatter_gg <- iris |> \n    ggplot(\n        aes(x = Petal.Length, y = Petal.Width)\n    ) +\n    geom_point(\n        aes(color = Species),\n        size = 2\n    )\n## Imprimir\nbase_scatter_gg\n```\n\n::: {.cell-output-display}\n![Gráfico de dispersión con ggplot2](1103_relationship_files/figure-html/fig-dispersion-scatter-1.png){#fig-dispersion-scatter width=672}\n:::\n:::\n\n\n\n\nFíjate que como hemos utilizado `theme_set()` al principio del documento, no hemos tenido que añadir `theme_bw()` en el gráfico.\n\nPues así de sencillo es crear un gráfico de dispersión en `ggplot2`. Como ya estamos familiarizados con la funcionalidad básica, vamos a aprender a cambiar los colores de los puntos y a mover la leyenda.\n\nVamos a empezar modificando los colores de cada una de las especies para que sean:\n\n-   `Iris setosa`: azul oscuro\n\n-   `Iris versicolor`: verde oscuro\n\n-   `Iris virginica`: rojo oscuro\n\nSi recordáis, en la @sec-components-scales veíamos que las variables numéricas traen por defecto una escala continua (i.e. `scale_*_continuous()`) y las variables categóricas una escala de discreta (i.e. `scale_*_discrete()`).\n\nEn este caso, queremos cambiar los colores de las especies, y para ello tenemos que modificar la escala a `manual` con la función `scale_color_manual()`. A continuación, se muestra el código para cambiar los colores de las especies:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nscales_scatter_gg <- base_scatter_gg +\n    scale_color_manual(\n        name   = \"Especies\",\n        values = c(\"darkblue\", \"darkgreen\", \"darkred\")\n    )\n## Imprimir\nscales_scatter_gg\n```\n\n::: {.cell-output-display}\n![Gráfico de dispersión con ggplot2](1103_relationship_files/figure-html/fig-dispersion-scatter-colors-1.png){#fig-dispersion-scatter-colors width=672}\n:::\n:::\n\n\n\n\nCon el argumento `name` de las funciones `scale*` podemos cambiar el nombre de la leyenda, y en `values` tenemos que especificar un vector con los colores que queremos asignar a cada categoría.\n\n::: callout-note\nEn @fig-dispersion-scatter-colors hemos asignado a `values` un vector de longitud 3 porque tenemos 3 categorías (1 por especie). Si asignamos más colores de los necesarios, la función los ignorará, mientras que si asignamos menos, la función nos dará el error: `Insufficient values in manual scale`\n:::\n\nLo siguiente que vamos a aprender es a mover la leyenda. Aquí tenemos dos opciones:\n\n-   Utilizar una posición relativa al gráfico\n\n-   Utilizar una posición absoluta dentro del gráfico\n\nVamos a utilizar el método introducido en la versión 3.5.0 de `{ggplot2}` que es el siguiente:\n\n::: panel-tabset\n## Posición relativa\n\nLa posición relativa es la más sencilla. La forma **recomendable** es la siguiente, ya que si tuviéramos más de una leyenda, podríamos controlar la posición de cada una dentro de `guides`.\n\nLo que estamos haciendo es: (1) utilizar la función `guides`; (2) como argumento utilizar el nombre la estética de la leyenda que queremos modificar (`color`); (3) utilizar la función `guide_legend()` que tiene muchos argumentos para modificar la leyenda.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\n## Load packages\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        selectInput(\n            inputId = \"position_input\", \n            label   = \"Posición\", \n            choices = c(\"bottom\", \"top\", \"left\", \"right\", \"inside\"),\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            scales_scatter_gg +\n                guides(\n                    color = guide_legend(\n                        position = \"{input$position_input}\"\n                    )\n                )'\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        iris |> \n            ggplot(\n                aes(x = Petal.Length, y = Petal.Width)\n            ) +\n            geom_point(\n                aes(color = Species),\n                size = 2\n            ) +\n            scale_color_manual(\n                name   = \"Especies\",\n                values = c(\"darkblue\", \"darkgreen\", \"darkred\")\n            ) +\n            guides(\n                color = guide_legend(\n                    position = {input$position_input}\n                )\n            ) +\n            theme_bw(base_size = 8)\n            }, res = 96\n    )\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n\n## Posición absoluta\n\nPara la posición absoluta, debemos utilizar `position = \"inside\"`. Una vez hecho esto, debemos modificar el argumento `legend.position.inside` dentro de la función `theme()` indicar un vector numérico de longitud 2, donde el primer número indica el % de desplazamiento sobre el eje `x` desde el origen, mientras que el segundo número indica el % de desplazamiento sobre el eje `y`. Prueba a cambiar los valores en la siguiente aplicación para entender su funcionamiento:\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\n## Load packages\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        sliderInput(\n            inputId = \"position_input_x\", \n            label   = \"Posición eje x\",\n            min     = 0,\n            max     = 1,\n            value   = 0.5,\n            step    = 0.1\n        ),\n        sliderInput(\n            inputId = \"position_input_y\", \n            label   = \"Posición eje y\",\n            min     = 0,\n            max     = 1,\n            value   = 0.5,\n            step    = 0.1\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            scales_scatter_gg +\n                guides(\n                    color = guide_legend(\n                        position = \"inside\"\n                    )\n                ) +\n                theme(\n                    legend.position.inside = c({input$position_input_x}, {input$position_input_y})'\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        iris |> \n            ggplot(\n                aes(x = x = Petal.Length, y = Petal.Width)\n            ) +\n            geom_point(\n                aes(color = Species),\n                size = 2\n            ) +\n            scale_color_manual(\n                name   = \"Especies\",\n                values = c(\"darkblue\", \"darkgreen\", \"darkred\")\n            ) +\n            guides(\n                color = guide_legend(\n                    position = \"inside\"\n                )\n            ) +\n            theme_bw(base_size = 8) +\n            theme(\n                legend.position.inside = c(input$position_input_x, input$position_input_y))\n            }, res = 96\n    )\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n:::\n\nYo no soy particularmente fan de utilizar leyendas, sobre todo cuando tenemos dos o tres clases nada más. En estos casos crearía un gráfico como el siguiente, pero para un curso de iniciación es algo bastante complejo de abordar:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Gráfico de dispersión sin leyenda](1103_relationship_files/figure-html/fig-dispersion-scatter-no-legend-1.png){#fig-dispersion-scatter-no-legend width=672}\n:::\n:::\n\n\n\n\n\n## Mapas de calor\n",
    "supporting": [
      "1103_relationship_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}