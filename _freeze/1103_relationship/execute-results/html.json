{
  "hash": "0dea46041f07dd12d68be0b42f53c08c",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\nfilters: \n    - webr\nwebr:\n    packages: [\"dplyr\", \"ggplot2\"]\n---\n\n\n\n\n# Gráficos de relación\n\nLos gráficos de relación son aquellos que nos permiten visualizar la relación que tienen entre sí dos o más variables. Dentro de los gráficos de relación también se puede denominar gráficos de correlación, y agrupan una familia más grande que la que veíamos en la @fig-vis-classification.\n\nEn este capítulo veremos los siguientes gráficos de relación:\n\n1.  Gráfico de dispersión (*Scatter plot*)\n\n2.  Gráfico de burbujas (*Bubble plot*)\n\n3.  Mapas de calor (*Heatmap*)\n\nEn este capítulo vamos a trabajar con tres *datasets*:\n\n-   `iris`: *dataset* donde se han medido la longitud y anchura de pétalos y sépalos de 150 flores, además de la especie a la que pertenecen (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}).\n\n-   `gapminder`: *dataset* con la evolución temporal del desarrollo económico, población y esperanza de vida de los países del mundo (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}). Filtraremos solamente los datos del 2002.\n\n-   `inventario`: *dataset* con datos de inventario de 27 parcelas en los que se ha medido el DBH, altura y especie (ver @sec-vis-data).\n\nPara comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar paquetes\nlibrary(gapminder)\nlibrary(GGally)\nlibrary(tidyverse)\n# Cargar datos\ninventario_tbl <- read_rds(\"data/inventario_prep.rds\")\ngapminder_tbl <- gapminder |> \n    filter(year == 2002)\n```\n:::\n\n\n\n\n## Objetivos\n\nAl final de este capítulo serás capaz de:\n\n-   Utilizar un tema distinto por defecto\n\n-   Crear gráficos de dispersión y burbujas\n\n-   Crear mapas de calor\n\n-   Crear gráficos de correlación\n\n-   Añadir texto como geometría a los gráficos\n\n-   Controlar colores utilizando `scales`\n\n-   Mover la leyenda\n\n## Gráficos de dispersión\n\nAntes de empezar, vamos a ver como modificar el tema que viene por defecto en `{ggplot2}`, para que no tengamos que añadirlo en cada gráfico que hagamos.\n\nUtilizando la función `theme_set()` podemos establecer un tema por defecto para todos los gráficos que hagamos en el documento. En este caso, hemos seleccionado el tema `theme_classic()`, que es uno de los temas más utilizados en `{ggplot2}`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(\n    theme_classic()\n)\n```\n:::\n\n\n\n\nLos gráficos de dispersión son una de las formas más comunes de visualizar la relación entre dos **variables numéricas**. En un gráfico de dispersión, cada punto representa una observación y se coloca en el eje `x` según el valor de la primera variable y en el eje `y` según el valor de la segunda variable.\n\nPara crear un gráfico de dispersión en `ggplot2` se utiliza la función `geom_point()`. A continuación, se muestra un ejemplo de cómo crear un gráfico de dispersión utilizando el *dataset* `gapminder` relacionando el PIB per cápita con la esperanza de vida, y coloreando los puntos según el continente.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbase_scatter_gg <- gapminder_tbl |> \n    ggplot(\n        aes(x = gdpPercap, y = lifeExp, color = continent)\n    ) +\n    geom_point(\n        size = 2\n    ) +\n    labs(\n        x = \"PIB per cápita\",\n        y = \"Esperanza de vida\"\n    )\n## Imprimir\nbase_scatter_gg\n```\n\n::: {.cell-output-display}\n![Gráfico de dispersión con ggplot2](1103_relationship_files/figure-html/fig-dispersion-scatter-1.png){#fig-dispersion-scatter width=672}\n:::\n:::\n\n\n\n\nFíjate que como hemos utilizado `theme_set()` al principio del documento, no hemos tenido que añadir `theme_classic()` en el gráfico.\n\nPues así de sencillo es crear un gráfico de dispersión en `ggplot2`. Como ya estamos familiarizados con la funcionalidad básica, vamos a aprender a cambiar los colores de los puntos y a mover la leyenda.\n\nVamos a empezar modificando los colores de cada uno de los continentes para que sean:\n\n-   `África`: naranja\n\n-   `América`: negro\n\n-   `Asia`: lila\n\n-   `Europa`: azul\n\n-   `Oceanía`: verde\n\nSi recordáis, en la @sec-components-scales veíamos que las variables numéricas traen por defecto una escala continua (i.e. `scale_*_continuous()`) y las variables categóricas una escala de discreta (i.e. `scale_*_discrete()`).\n\nEn este caso, queremos cambiar los colores de las especies, y para ello tenemos que modificar la escala a `manual` con la función `scale_color_manual()`. A continuación, se muestra el código para cambiar los colores de las especies:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nscales_scatter_gg <- base_scatter_gg +\n    scale_color_manual(\n        name   = \"Continente\",\n        values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n    )\n## Imprimir\nscales_scatter_gg\n```\n\n::: {.cell-output-display}\n![Gráfico de dispersión con ggplot2](1103_relationship_files/figure-html/fig-dispersion-scatter-colors-1.png){#fig-dispersion-scatter-colors width=672}\n:::\n:::\n\n\n\n\nCon el argumento `name` de las funciones `scale*` podemos cambiar el nombre de la leyenda, y en `values` tenemos que especificar un vector con los colores que queremos asignar a cada categoría.\n\n::: callout-note\nEn @fig-dispersion-scatter-colors hemos asignado a `values` un vector de longitud 5 porque tenemos 5 categorías (1 por continente). Si asignamos más colores de los necesarios, la función los ignorará, mientras que si asignamos menos, la función nos dará el error: *`Insufficient values in manual scale`*\n:::\n\nLo siguiente que vamos a aprender es a mover la leyenda. Aquí tenemos dos opciones:\n\n-   Utilizar una posición relativa al gráfico\n\n-   Utilizar una posición absoluta dentro del gráfico\n\nVamos a utilizar el método introducido en la versión 3.5.0 de `{ggplot2}` que es el siguiente:\n\n::: panel-tabset\n## Posición relativa\n\nLa posición relativa es la más sencilla. La forma **recomendable** es la siguiente, ya que si tuviéramos más de una leyenda, podríamos controlar la posición de cada una dentro de `guides`.\n\nLo que estamos haciendo es: (1) utilizar la función `guides`; (2) como argumento utilizar el nombre la estética de la leyenda que queremos modificar (`color`); (3) utilizar la función `guide_legend()` que tiene muchos argumentos para modificar la leyenda.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\n## Load packages\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        selectInput(\n            inputId = \"position_input\", \n            label   = \"Posición\", \n            choices = c(\"bottom\", \"top\", \"left\", \"right\", \"inside\"),\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            scales_scatter_gg +\n                guides(\n                    color = guide_legend(\n                        position = \"{input$position_input}\"\n                    )\n                )'\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        gapminder |> \n            filter(year == 2002) |> \n            ggplot(\n                aes(x = gdpPercap, y = lifeExp, color = continent)\n            ) +\n            geom_point(\n                size = 2\n            ) +\n            labs(\n                x = \"PIB per cápita\",\n                y = \"Esperanza de vida\"\n            ) +\n            scale_color_manual(\n                name   = \"Continente\",\n                values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n            ) +\n            guides(\n                color = guide_legend(\n                    position = {input$position_input}\n                )\n            ) +\n            theme_bw(base_size = 8)\n        }, res = 96\n    )\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n\n## Posición absoluta\n\nPara la posición absoluta, debemos utilizar `position = \"inside\"`. Una vez hecho esto, debemos modificar el argumento `legend.position.inside` dentro de la función `theme()` indicar un vector numérico de longitud 2, donde el primer número indica el % de desplazamiento sobre el eje `x` desde el origen, mientras que el segundo número indica el % de desplazamiento sobre el eje `y`. Prueba a cambiar los valores en la siguiente aplicación para entender su funcionamiento:\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\n## Load packages\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        sliderInput(\n            inputId = \"position_input_x\", \n            label   = \"Posición eje x\",\n            min     = 0,\n            max     = 1,\n            value   = 0.5,\n            step    = 0.1\n        ),\n        sliderInput(\n            inputId = \"position_input_y\", \n            label   = \"Posición eje y\",\n            min     = 0,\n            max     = 1,\n            value   = 0.5,\n            step    = 0.1\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            scales_scatter_gg +\n                guides(\n                    color = guide_legend(\n                        position = \"inside\"\n                    )\n                ) +\n                theme(\n                    legend.position.inside = c({input$position_input_x}, {input$position_input_y})'\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        gapminder |> \n            filter(year == 2002) |> \n            ggplot(\n                aes(x = gdpPercap, y = lifeExp, color = continent)\n            ) +\n            geom_point(\n                size = 2\n            ) +\n            labs(\n                x = \"PIB per cápita\",\n                y = \"Esperanza de vida\"\n            ) +\n            scale_color_manual(\n                name   = \"Continente\",\n                values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n            ) +\n            guides(\n                color = guide_legend(\n                    position = \"inside\"\n                )\n            ) +\n            theme_bw(base_size = 8) +\n            theme(\n                legend.position.inside = c(input$position_input_x, input$position_input_y))\n            }, res = 96\n    )\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n## Gráficos de burbujas\n\nLos gráficos de burbujas son una extensión de los gráficos de dispersión, donde se añade una **tercera variable numérica** que se representa mediante el tamaño de los puntos.\n\n::: callout-note\nEn la práctica, si utilizamos las estéticas de `color` y `size`, estamos visualizando 4 variables numéricas al mismo tiempo!!\n:::\n\nEn `ggplot2`, podemos añadir una tercera variable utilizando la estética `size` en la función `aes()`. Al *scatter plot* anterior, vamos a añadirle como variable de `size` la población. Como vamos a añadir nuevos elementos, vamos a añadir el código paso a paso:\n\n::: panel-tabset\n## 1. Bubble plot\n\nEmpezamos generando un *bubble plot* añadiendo la variable *pop:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbubble_base <- gapminder_tbl |> \n    ggplot(\n        aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)\n    ) +\n    geom_point(\n        alpha = 0.7\n    ) +\n    labs(\n        x = \"PIB per cápita\",\n        y = \"Esperanza de vida\"\n    ) +\n    scale_color_manual(\n        name   = \"Continente\",\n        values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n    )\n## Imprimir\nbubble_base\n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n## 2. Tamaño puntos\n\nEl tamaño de los puntos al igual que el color de los mismos es una estética. Para modificar una estética mapeada a una variable utilizamos las funciones `scale_*`. Como la estética es `size`, utilizamos `scale_size*()`. En el argumento `range` indicamos el tamaño del punto más pequeño y el tamaño del punto más grande:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbubble_size <- bubble_base +\n    scale_size(range = c(1, 15))\n## Imprimir\nbubble_size\n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## 3. Eliminar una leyenda\n\nRecuerdas la función `guides` que vimos antes? Si igualamos una de las estéticas a `\"none\"` eliminaremos solamente esa leyenda:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbubble_guides <- bubble_size +\n    guides(\n        size = \"none\"\n    )\n## Imprimir\nbubble_guides\n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## 4. Posicionar leyenda\n\nPara terminar, vamos a posicionar la leyenda del continente en la parte inferior derecha del gráfico para aprovechar el espacio:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbubble_final <- bubble_guides +\n    guides(\n        color = guide_legend(\n            position = \"inside\"\n        )\n    ) +\n    theme(\n        legend.position.inside = c(.9, .2)\n    ) \n## Imprimir\nbubble_final\n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## 5. Resumen\n\nEste gráfico nos muestra que los países con menor PIB per cápita son también aquellos con generalmente menor esperanza de vida y se encuentran principalmente en África.\n\nPara terminar, vamos a ver como se vería todo el código en un solo bloque:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_tbl |> \n    ## Capas\n    ggplot(\n        aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)\n    ) +\n    geom_point(\n        alpha = 0.7\n    ) +\n    ## Etiquetas\n    labs(\n        x = \"PIB per cápita\",\n        y = \"Esperanza de vida\"\n    ) +\n    ## Escalas y guías\n    scale_color_manual(\n        name   = \"Continente\",\n        values = c(\"#FF5733\", \"black\", \"#A833FF\", \"#3366FF\", \"#33FF57\")\n    ) +\n    scale_size(range = c(1, 15)) +\n    guides(\n        size  = \"none\",\n        color = guide_legend(\n            position = \"inside\"\n        )\n    ) +\n    ## Temas\n    theme(\n        legend.position.inside = c(.9, .2)\n    ) \n```\n\n::: {.cell-output-display}\n![](1103_relationship_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\nUff 😥... Si es tu primera vez estudiando `{ggplot2}` es posible que te esté explotando la cabeza. No te preocupes!! Es normal que al principio te cueste, pero poco a poco iremos dominándolo juntos😎.\n\n### Ejercicio 7\n\nEs hora de ponerse manos a la obra! El objetivo del siguiente ejercicio es replicar el siguiente gráfico con el *dataset* de `iris`. Recuerda la estructura de los datos:\n\n\n\n\n::: {#tbl-iris-head .cell tbl-cap='Estructura de los datos de Iris'}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"yzjjntieml\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#yzjjntieml table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#yzjjntieml thead, #yzjjntieml tbody, #yzjjntieml tfoot, #yzjjntieml tr, #yzjjntieml td, #yzjjntieml th {\n  border-style: none;\n}\n\n#yzjjntieml p {\n  margin: 0;\n  padding: 0;\n}\n\n#yzjjntieml .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 3px;\n  border-top-color: #D5D5D5;\n  border-right-style: solid;\n  border-right-width: 3px;\n  border-right-color: #D5D5D5;\n  border-bottom-style: solid;\n  border-bottom-width: 3px;\n  border-bottom-color: #D5D5D5;\n  border-left-style: solid;\n  border-left-width: 3px;\n  border-left-color: #D5D5D5;\n}\n\n#yzjjntieml .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#yzjjntieml .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#yzjjntieml .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#yzjjntieml .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#yzjjntieml .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D5D5D5;\n}\n\n#yzjjntieml .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D5D5D5;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D5D5D5;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#yzjjntieml .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #004D80;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#yzjjntieml .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #004D80;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#yzjjntieml .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#yzjjntieml .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#yzjjntieml .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D5D5D5;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#yzjjntieml .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#yzjjntieml .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D5D5D5;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D5D5D5;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#yzjjntieml .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D5D5D5;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D5D5D5;\n  vertical-align: middle;\n}\n\n#yzjjntieml .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#yzjjntieml .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#yzjjntieml .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D5D5D5;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D5D5D5;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D5D5D5;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#yzjjntieml .gt_stub {\n  color: #FFFFFF;\n  background-color: #929292;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D5D5D5;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzjjntieml .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#yzjjntieml .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#yzjjntieml .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#yzjjntieml .gt_summary_row {\n  color: #FFFFFF;\n  background-color: #5F5F5F;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzjjntieml .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D5D5D5;\n}\n\n#yzjjntieml .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#yzjjntieml .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D5D5D5;\n}\n\n#yzjjntieml .gt_grand_summary_row {\n  color: #FFFFFF;\n  background-color: #929292;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzjjntieml .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D5D5D5;\n}\n\n#yzjjntieml .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D5D5D5;\n}\n\n#yzjjntieml .gt_striped {\n  background-color: #F4F4F4;\n}\n\n#yzjjntieml .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D5D5D5;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D5D5D5;\n}\n\n#yzjjntieml .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#yzjjntieml .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzjjntieml .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#yzjjntieml .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzjjntieml .gt_left {\n  text-align: left;\n}\n\n#yzjjntieml .gt_center {\n  text-align: center;\n}\n\n#yzjjntieml .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#yzjjntieml .gt_font_normal {\n  font-weight: normal;\n}\n\n#yzjjntieml .gt_font_bold {\n  font-weight: bold;\n}\n\n#yzjjntieml .gt_font_italic {\n  font-style: italic;\n}\n\n#yzjjntieml .gt_super {\n  font-size: 65%;\n}\n\n#yzjjntieml .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#yzjjntieml .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#yzjjntieml .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#yzjjntieml .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#yzjjntieml .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#yzjjntieml .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#yzjjntieml .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Sepal.Length\">Sepal.Length</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Sepal.Width\">Sepal.Width</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Petal.Length\">Petal.Length</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Petal.Width\">Petal.Width</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Species\">Species</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right\">5.1</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right\">3.5</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right\">1.4</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right gt_striped\">4.9</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right gt_striped\">3.0</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right gt_striped\">1.4</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right gt_striped\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center gt_striped\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right\">4.7</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right\">3.2</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right\">1.3</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right gt_striped\">4.6</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right gt_striped\">3.1</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right gt_striped\">1.5</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right gt_striped\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center gt_striped\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right\">5.0</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right\">3.6</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right\">1.4</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right\">0.2</td>\n<td headers=\"Species\" class=\"gt_row gt_center\">setosa</td></tr>\n    <tr><td headers=\"Sepal.Length\" class=\"gt_row gt_right gt_striped\">5.4</td>\n<td headers=\"Sepal.Width\" class=\"gt_row gt_right gt_striped\">3.9</td>\n<td headers=\"Petal.Length\" class=\"gt_row gt_right gt_striped\">1.7</td>\n<td headers=\"Petal.Width\" class=\"gt_row gt_right gt_striped\">0.4</td>\n<td headers=\"Species\" class=\"gt_row gt_center gt_striped\">setosa</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n::: panel-tabset\n## Gráfico esperado\n\nIntenta replicar este gráfico en la pestaña \"Ejercicio\"\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Resultado esperado del ejercicio 7](1103_relationship_files/figure-html/fig-distribution-ej7-1.png){#fig-distribution-ej7 width=672}\n:::\n:::\n\n\n\n\n## Ejercicio\n\nCompletar el código:\n\n```{webr-r}\niris |> \n    ## Introducir código\n    labs(\n        title = \"Relación entre longitud de pétalo, anchura de pétalo y longitud de sépalo\",\n        x = \"Longitud de pétalo (mm)\",\n        y = \"Anchura de pétalo (mm)\"\n    ) \n```\n\n## Solución\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n    ggplot(\n        aes(\n            x = Petal.Length, \n            y = Petal.Width,\n            color = Species,\n            size  = Sepal.Length\n        )\n    ) +\n    geom_point() +\n    labs(\n        title = \"Relación entre longitud de pétalo, anchura de pétalo y longitud de sépalo\",\n        x = \"Longitud de pétalo (mm)\",\n        y = \"Anchura de pétalo (mm)\"\n    ) +\n    scale_color_manual(\n        name   = \"Especies\",\n        values = c(\"#FF6347\", \"#4682B4\", \"#32CD32\")\n    ) +\n    scale_size(range = c(1, 5)) +\n    guides(\n        size = \"none\",\n        color = guide_legend(position = \"inside\")\n    ) +\n    theme(\n        legend.position.inside = c(.1, .8)\n    )\n```\n\n::: {.cell-output-display}\n![Solución del ejercicio 7](1103_relationship_files/figure-html/fig-distribution-ej7-sol-1.png){#fig-distribution-ej7-sol width=672}\n:::\n:::\n\n\n\n:::\n\n## Mapas de calor\n\nDentro de los mapas de calor voy a hacer una clasificación para entender sus dos principales usos:\n\n1.  **Mapa de calor clásico**: El primero será un mapa de calor donde comparamos el valor de una variable numérica (o una categórica) **en función de dos variables categóricas**.\n\n2.  **Mapa de calor de correlación**: El segundo será un mapa de calor donde comparamos la **correlación** entre las variables numéricas de un *dataset*.\n\n::: calllout-note\nEsta nomenclatura es propia y no tiene por qué ser la misma que se utiliza en la literatura.\n:::\n\n### Mapa de calor clásico\n\nLos mapas de calor son una forma de visualizar la relación entre las categorías de dos variables categóricas y una variable numérica (o otra categórica). Las categorías de las variables categóricas se representan en los ejes `x` e `y`, y la variable numérica se representa mediante el color de las celdas.\n\n::: callout-note\nExisten tres funciones en `ggplot2` que nos permiten crear mapas de calor: `geom_tile()`, `geom_raster()` y `geom_rect()`.\n:::\n\nVamos a ver la evolución de la esperanza de vida en los países de Europa a lo largo de los años. Para ello, vamos a utilizar el *dataset* `gapminder` y filtrar los datos de Europa:\n\n::: panel-tabset\n## Primer heatmap\n\nPara crear el primer *heatmap* vamos a utilizar la función `geom_tile()`. En el eje `x` utilizamos los años, en el eje `y` los países europeos, y como esta geometría dibuja polígonos, los coloreamos con la estética `fill`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n    filter(continent == \"Europe\") |> \n    ## Crear gráfico\n    ggplot(\n        aes(x = year, y = country, fill = lifeExp)\n    ) +\n    geom_tile() +\n    labs(\n      x = NULL,\n      y = NULL,\n      fill = \"Esperanza de vida\"\n    )\n```\n\n::: {.cell-output-display}\n![Primer mapa de calor con `{ggplot2}`](1103_relationship_files/figure-html/fig-heatmap-1.png){#fig-heatmap width=672}\n:::\n:::\n\n\n\n\nComo primer intento está bien... Pero puedes ver lo que ocurre en el eje `x`? Los años son números sí, pero son una variable categórica en esto datos. Tenemos un número pequeño de años que queremos tratar como categorías, no como números.\n\n::: callout-tip\nPuedes ver que para eliminar los títulos de los ejes utilizamos `y = NULL` y `x = NULL`.\n:::\n\n## Convertir años\n\nRecuerdas cómo hacíamos para convertir una variable a categórica? Exacto, utilizamos la función `as.factor()`, que además es muy conveniente ya que ordena los niveles de la variable alfabéticamente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n    filter(continent == \"Europe\") |> \n    mutate(\n        year = as.factor(year)\n    ) |> \n    ## Crear gráfico\n    ggplot(\n        aes(x = year, y = country, fill = lifeExp)\n    ) +\n    geom_tile() +\n    labs(\n      x = NULL,\n      y = NULL,\n      fill = \"Esperanza de vida\"\n    )\n```\n\n::: {.cell-output-display}\n![Segundo mapa de calor con `{ggplot2}`](1103_relationship_files/figure-html/fig-heatmap2-1.png){#fig-heatmap2 width=672}\n:::\n:::\n\n\n\n\nSolucionado! Ahora ya sabemos a qué año pertenece cada celda. Vamos a intentar formatear un poco más el gráfico... Vamos a utilizar una paleta de colores adecuada y ordenar los países para que Albania sea el primero en la parte superior.\n\n## Personalizar\n\nEn la @fig-heatmap3 se muestra el resultado final. Vamos a ver lo que hemos hecho:\n\n-   Hemos ordenado los países utilizando la función `fct_rev()` del paquete `{forcats}`. Esta función invierte el orden de los factores.\n\n-   Hemos utilizado la paleta de colores [viridis](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html) con la función `scale_fill_viridis_c()`. Utilizamos `scale_fill_*`, porque la estética que modificamos es `fill`. A continuación, añadimos `scale_fill_viridis_*` que es una función que tiene unas paletas de colores muy utilizadas y viene implementada en `{ggplot2}`, y finalmente añadimos la `c`, que quiere decir que la variable de la estética `fill` es una variable **c**ontinua.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(continent == \"Europe\") |> \n  mutate(\n      year = as.factor(year)\n  ) |> \n  ggplot(\n      aes(x = year, y = fct_rev(country), fill = lifeExp)\n  ) +\n  geom_tile() +\n  labs(\n    x = NULL,\n    y = NULL,\n    fill = \"Esperanza de vida\"\n  ) +\n  scale_fill_viridis_c() +\n  theme_minimal() \n```\n\n::: {.cell-output-display}\n![Mapa de calor personalizado](1103_relationship_files/figure-html/fig-heatmap3-1.png){#fig-heatmap3 width=672}\n:::\n:::\n\n\n\n\n## Etiquetas\n\nAlgo común en los mapas de calor es presentarlos como tablas de colores, donde no solamente tenemos las celdas de colores, si no también el dato real que representan. Para añadirlos, vamos a añadir un nueva geometría que es `geom_text()`, que tiene 3 estéticas obligatorias: `x`, `y` y `label`. Las dos primeras serán la posición de la etiqueta, y `label` será el texto que se muestra:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n    filter(continent == \"Europe\") |> \n    mutate(\n        year    = as.factor(year),\n        lifeExp = round(lifeExp, 1)\n    ) |> \n    ggplot(\n        aes(x = year, y = fct_rev(country))\n    ) +\n    geom_tile(\n        aes(fill = lifeExp),\n        show.legend = FALSE\n    ) +\n    geom_text(\n        aes(label = lifeExp),\n        size = 2.5\n    ) +\n    labs(\n        x = NULL,\n        y = NULL,\n        title = \"La esperanza de vida en los países europeos aumentó considerablemente\"\n    ) +\n    scale_fill_gradientn(\n        colours = hcl.colors(10, \"Blues\", rev = TRUE)\n    ) +\n    theme_minimal() +\n    theme(\n        plot.title = element_text(\n            size  = 10,\n            face  = \"bold\", \n            hjust = .5\n        )\n    )\n```\n\n::: {.cell-output-display}\n![Heatmap con etiquetas](1103_relationship_files/figure-html/fig-heatmap4-1.png){#fig-heatmap4 width=672}\n:::\n:::\n\n\n\n\nHemos añadido `scale_fill_grandientn()` que es el equivalente a `scale_fill_manual()` para variables continuas. La función `hcl.colors()` simplemente nos devuelve un vector de colores:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nhcl.colors(10, \"Blues\", rev = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"#F4FAFE\" \"#E1F0F8\" \"#C8DFEE\" \"#ACCCE4\" \"#8FB7D9\" \"#709FCD\" \"#5087C1\"\n [8] \"#316DB3\" \"#305292\" \"#273871\"\n```\n\n\n:::\n:::\n\n\n\n\nFíjate que también hemos movido `aes(fill = lifeExp)`. Se te ocurre por qué puede ser esto? Dentro de `ggplot()` introducimos las estéticas que queremos que hereden el resto de geometrías, y `fill` solamente la queremos para `geom_tile()` mientras que `label` solamente la queremos para `geom_text()`.\n\nY finalmente, modificamos el título del gráfico para reducir su tamaño base, ponerlo en negrita y justificarlo en el medio. No te preocupes si la sintaxis de la componente `theme()` te parece extraña, nos iremos familiarizando con ella poco a poco.\n:::\n\nY con esto hemos visto el primer tipo de de *heatmaps*. Vamos a realizar un ejercicio utilizando los datos de inventario:\n\n### Ejercicio 8\n\nUtilizar de nuevo los datos de inventario para generar un *heatmap* donde se muestre el **DBH medio por parcela y especie**. Ten en cuenta que debes calcularlo. En la pestaña \"Pista\" tendrás la parte que genera estos datos, y que serán los datos que utilizarás en `ggplot()`.\n\nLa estructura de los datos era la siguiente:\n\n```{webr-r}\n#| context: setup\n#| autorun: true\n## Url de los datos\nurl <- \"https://cidree.github.io/MG_datasets/inventario_prep.csv\"\ninventario_tbl <- read.csv(url) |> as_tibble()\n```\n\n```{webr-r}\n#| autorun: true\n## Estructura datos\ninventario_tbl\n```\n\n::: panel-tabset\n## Gráfico esperado\n\nEl resultado esperado es el de la @fig-distribution-ej8.\n\n::: callout-tip\nPara conseguir las dimensiones del gráfico tenemos que añadir la componente `coord_fixed(ratio = .5)`. Esto hace que una unidad del eje `x` sea equivalente a 0.5 unidades del eje `y` y por lo tanto, los rectángulos tengan el doble de longitud en `x`\n:::\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Resultado esperado del ejercicio 8](1103_relationship_files/figure-html/fig-distribution-ej8-1.png){#fig-distribution-ej8 width=672}\n:::\n:::\n\n\n\n\n## Ejercicio\n\nLa paleta de colores utilizada es `hcl.colors(10, \"Greens\", rev = TRUE)`.\n\n```{webr-r}\n## Escribe el código aquí\ninventario_tbl\n```\n\n## Pista\n\nEl procesado de los datos es el siguiente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_tbl |> \n    summarise(\n        dbh_mean = mean(dbh_mm, na.rm = TRUE) / 10,\n        .by = c(id_plots, nombre_ifn)\n    ) |> \n    mutate(\n        dbh_mean = round(dbh_mean)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 34 × 3\n   id_plots nombre_ifn       dbh_mean\n   <fct>    <fct>               <dbl>\n 1 0        Pinus sylvestris       20\n 2 0        Pinus nigra            14\n 3 2        Pinus sylvestris       17\n 4 3        Pinus sylvestris       21\n 5 4        Pinus sylvestris       15\n 6 5        Pinus nigra            16\n 7 6        Pinus sylvestris       17\n 8 7        Pinus sylvestris       18\n 9 8        Pinus sylvestris       24\n10 9        Pinus sylvestris       23\n# ℹ 24 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Solución\n\nLa solución al ejercicio es:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_tbl |> \n    summarise(\n        dbh_mean = mean(dbh_mm, na.rm = TRUE) / 10,\n        .by = c(id_plots, nombre_ifn)\n    ) |> \n    mutate(\n        dbh_mean = round(dbh_mean)\n    ) |> \n    ggplot(\n        aes(y = nombre_ifn, x = id_plots)\n    ) +\n    geom_tile(\n        aes(fill = dbh_mean),\n        show.legend = FALSE\n    ) +\n    geom_text(\n        aes(label = dbh_mean),\n        size = 3\n    ) +\n    scale_fill_gradientn(\n        colours = hcl.colors(10, \"Greens\", rev = TRUE)\n    ) +\n    theme_minimal() +\n    labs(\n        x = \"Parcela\",\n        y = NULL,\n        title = \"DBH medio (cm) por parcela y especie\"\n    ) +\n    coord_fixed(ratio = .5) +\n    theme(\n        plot.title = element_text(hjust = .5, face = \"bold\")\n    )\n```\n\n::: {.cell-output-display}\n![Resultado final del ejercicio 8](1103_relationship_files/figure-html/fig-distribution-ej8-sol-1.png){#fig-distribution-ej8-sol width=672}\n:::\n:::\n\n\n\n:::\n\nFelicidades 🥳 !!! Hemos aprendido mucho hasta este punto. Aunque estés confuso por el uso de algunas funciones del tipo `scale_*` o `coords_*`, no te preocupes! Esto será cuestión de otro tema dedicado a ellas. De momento vamos introduciendo poco a poco estas componentes para que los ejercicios no sean solamente geometrías, y para que te vayas familiarizando poco a poco con la gramática. Sin más dilación, vamos a ver el siguiente tipo de *heatmaps*.\n\n### Mapa de calor de correlación\n\nLos mapas de calor de correlación (*correlacion heatmaps*) son una forma de visualizar la relación entre **las variables numéricas** de un *dataset*. En estos mapas, las variables se representan en los ejes `x` e `y`, y la correlación entre ellas se representa mediante el color de las celdas.\n\nPara entender esto, debemos definir la correlación. La correlación es una medida estadística que describe la relación entre dos variables y tiene la siguiente fórmula:\n\n$$\nr_{xy} = \\frac{cov(x,y)}{SD_x \\cdot SD_y}\n$$ {#eq-pearson1}\n\n$$\nr_{xy} = \\frac{\\sum_{i=1}^{n} (x_i - \\bar{x})(y_i - \\bar{y})}{\\sqrt{\\sum_{i=1}^{n} (x_i - \\bar{x})^2 \\sum_{i=1}^{n} (y_i - \\bar{y})^2}}\n$$ {#eq-pearson2}\n\nTécnicamente, esto es la [correlación de Pearson](https://es.wikipedia.org/wiki/Coeficiente_de_correlaci%C3%B3n_de_Pearson){target=\"_blank\"} y mide el grado de correlación **lineal** entre la variable `x` y la variable `y` dando como resultado un número entre -1 y 1 donde:\n\n-   Valores negativos: cuando los valores de una variable aumentan, los de la otra disminuyen\n\n-   Valores cercanos a 0: no existe relación lineal entre las variables\n\n-   Valores positivos: cuando los valores de una variable aumentan, lo de la otra también\n\nEn la siguiente figura se muestran varios ejemplos:\n\n![Ejemplos de valores del coeficiente de correlación de Pearson para distintas combinaciones de dos variables. Fuente: [Wikipedia](https://es.wikipedia.org/wiki/Coeficiente_de_correlaci%C3%B3n_de_Pearson#/media/Archivo:Correlation_examples2.svg){target=\"_blank\"}](images/correlacion-pearson.png){#fig-correlation-types fig-align=\"center\"}\n\nEn este sentido, vamos a generar el *correlation heatmap* para los datos de `iris`:\n\n::: panel-tabset\n## Correlación\n\nLa correlación se calcula solamente para variables numéricas, así que para seleccionar solamente estas, y calcular la correlación con la función `cor()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Calcular correlación\niris_cor <- iris |> \n    select(\n        where(is.numeric)\n    ) |> \n    cor()\n## Imprimir\niris_cor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Sepal.Length Sepal.Width Petal.Length Petal.Width\nSepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411\nSepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259\nPetal.Length    0.8717538  -0.4284401    1.0000000   0.9628654\nPetal.Width     0.8179411  -0.3661259    0.9628654   1.0000000\n```\n\n\n:::\n:::\n\n\n\n\nLa diagonal será siempre 1, ya que la correlación de una variable consigo misma siempre será una recta.\n\n## Correlation heatmap\n\nExisten muchos paquetes que traen funciones internas que a partir de la matriz de correlación crean un *correlation heatmap*. Uno de mis favoritos es `{GGally}`.\n\nDe hecho, gracias a este paquete, no tenemos que realizar el paso anterior, y simplemente añadiendo nuestro datos a la función `ggcor()`, hará el trabajo por nosotros:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcorr(iris)\n```\n\n::: {.cell-output-display}\n![Mapa de calor de correlación simple con `{GGally}`](1103_relationship_files/figure-html/fig-correlation-heatmap-1.png){#fig-correlation-heatmap width=672}\n:::\n:::\n\n\n\n\nEsta función tiene parámetros que podemos modificar. Además, como es un objeto de `{ggplot2}`, podemos modificarlo como tal:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcorr(\n    iris,\n    label       = TRUE,\n    label_round = 2\n) +\n    labs(\n        title = \"Correlación de Pearson del dataset de {iris}\"\n    ) +\n    theme(\n        plot.title = element_text(\n            hjust = .5,\n            face  = \"bold\"\n        )\n    )\n```\n\n::: {.cell-output-display}\n![Mapa de calor de correlación personalizado con `{GGally}`](1103_relationship_files/figure-html/fig-correlation-heatmap2-1.png){#fig-correlation-heatmap2 width=672}\n:::\n:::\n\n\n\n\nCompara los valores de las etiquetas con los que obtuvimos al utilizar la función `cor()`.\n\n## Correlación por categorías\n\nFinalmente, tenemos la opción de añadir una variable categórica como puede ser la especie de Iris, y ver la correlación de cada variable por especie. Dentro de `{GGally}` tenemos la siguiente función:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpairs(\n    data = iris,\n    aes(color = Species)\n) +\n    theme_minimal(base_size = 8)\n```\n\n::: {.cell-output-display}\n![Mapa de calor de correlación por especie con `{GGally}`](1103_relationship_files/figure-html/fig-correlation-heatmap3-1.png){#fig-correlation-heatmap3 width=672}\n:::\n:::\n\n\n\n\nMadre mía, pero esto qué es 🥵🤯 !! Pues aquí tenemos varias cosas:\n\n-   Colores: cada color representa una especie (rojo = setosa; verde = versicolor; azul = virginica)\n\n-   Triángulo inferior: relación de las variables mediante *scatter plots* para pares de variables numéricas e histogramas para 1 variable numérica y 1 variable categórica.\n\n-   Diagonal: distribución unitaria de cada variable. Gráficos de densidad para numéricas, gráficos de barras para variables categóricas.\n\n-   Triángulo superior: valores de correlación para pares de variables numéricas. *Boxplots* para 1 variable numérica y 1 variable categórica.\n\nComo puedes ver, en básicamente una línea de código esta función nos da una información MUY valiosa sobre nuestros datos. Esta función la utilizo mucho durante el análisis exploratorio de mis datos.\n:::\n\n### Ejercicio 9\n\nCrear un gráfico de correlación con `{GGally}` para los datos de inventario.\n\nLa estructura de los datos era la siguiente:\n\n```{webr-r}\n#| autorun: true\n## Estructura datos\ninventario_tbl\n```\n\n::: panel-tabset\n\n## Gráfico esperado\n\nEl resultado esperado es el de la @fig-correlation-heatmap4. Fíjate que no incluimos la variable `id_plots` en el gráfico.\n\nLos colores utilizados son `cols <- c(\"#E56399\", \"#7F96FF\")`. \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Resultado esperado del ejercicio 9](1103_relationship_files/figure-html/fig-correlation-heatmap-ej-1.png){#fig-correlation-heatmap-ej width=672}\n:::\n:::\n\n\n\n\n## Ejercicio\n\nReplica el gráfico anterior e intenta entender qué ocurre en cada subgráfico.\n\n```{webr-r}\n## Escribe el código aquí\ninventario_tbl\n```\n\n## Solución\n\nEl resultado se muestra en la @fig-correlation-heatmap-sol. Fíjate que tenemos que añadir tanto `scale_color_manual()` para cambiar los colores de los puntos y `scale_fill_manual()` para cambiar los de los rectángulos.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Colores\ncols <- c(\"#E56399\", \"#7F96FF\")\n## Gráfico\ninventario_tbl |> \n  select(-id_plots) |>\n  ggpairs(\n    aes(color = nombre_ifn)\n  ) +\n  scale_color_manual(\n    values = cols\n  ) +\n  scale_fill_manual(\n    values = cols\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Resultado final del ejercicio 9](1103_relationship_files/figure-html/fig-correlation-heatmap-sol-1.png){#fig-correlation-heatmap-sol width=672}\n:::\n:::\n\n\n\n\n:::\n\nEnhorabuena! Has llegado al final de este capítulo. Sé que ha sido intenso, pero estamos aprendiendo mucho. En el próximo capítulo vamos a ver algunos gráficos de comparación.\n\n## Resumen\n\nEn este capítulo hemos aprendido a crear gráficos de dispersión y mapas de calor con `{ggplot2}`. Hemos aprendido a modificar las escalas de los ejes, a cambiar los colores de los puntos y a mover las leyendas. Además, hemos aprendido a crear mapas de calor de correlación y a personalizarlos.\n",
    "supporting": [
      "1103_relationship_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}