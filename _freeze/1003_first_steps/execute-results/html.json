{
  "hash": "88183e680e27013273c7bc8e4664a88a",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Primeros pasos con ggplot2\n\n`{ggplot2}` es un paquete de R que permite crear gr√°ficos de forma sencilla y flexible. A diferencia de muchos paquetes de R u otros software, `{ggplot2}` se basa en una gram√°tica de gr√°ficos [@gog] que permite crear gr√°ficos siguiendo una serie de reglas basadas en la construcci√≥n de gr√°ficos a partir de capas y otros componentes.\n\n## Objetivos {#sec-vis-objectives}\n\n-   Entender la gram√°tica de gr√°ficos y su implicaci√≥n dentro de `{ggplot2}`\n\n-   Estudiar los componentes que formar un gr√°fico en `{ggplot2}`\n\n-   Crear gr√°ficos sencillos\n\n-   Entender como funciona la herencia de datos y est√©ticas\n\n-   Estudiar la diferencia entre mapear y asignar una est√©tica\n\nEn esta secci√≥n, trabajaremos con los siguientes paquetes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(skimr)\nlibrary(readr)\n```\n:::\n\n\n\n\n## Datos de trabajo {#sec-vis-data}\n\nAntes de comenzar a trabajar con `{ggplot2}`, vamos a explorar los datos con los que vamos a trabajar. En este caso, vamos a utilizar un conjunto de datos de ejemplo que contiene informaci√≥n sobre una serie de √°rboles. Para cargar los datos, utilizaremos la funci√≥n `read_rds()` del paquete `{readr}`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_tbl <- read_rds(\"data/inventario_prep.rds\")\n```\n:::\n\n\n\n\nUna vez que hemos cargado los datos, vamos a utilizar la funci√≥n `skim` del paquete `{skimr}` para obtener un resumen de los datos:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskim(inventario_tbl)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |               |\n|:------------------------|:--------------|\n|Name                     |inventario_tbl |\n|Number of rows           |1540           |\n|Number of columns        |4              |\n|_______________________  |               |\n|Column type frequency:   |               |\n|factor                   |2              |\n|numeric                  |2              |\n|________________________ |               |\n|Group variables          |None           |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                     |\n|:-------------|---------:|-------------:|:-------|--------:|:------------------------------|\n|id_plots      |         0|             1|FALSE   |       27|17: 111, 11: 91, 5: 89, 14: 79 |\n|nombre_ifn    |         0|             1|FALSE   |        2|Pin: 1302, Pin: 238            |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|    sd|   p0|    p25|    p50|    p75|   p100|hist  |\n|:-------------|---------:|-------------:|------:|-----:|----:|------:|------:|------:|------:|:-----|\n|dbh_mm        |        12|          0.99| 184.85| 50.97| 65.0| 153.75| 177.00| 207.00| 531.00|‚ñÉ‚ñá‚ñÅ‚ñÅ‚ñÅ |\n|height_m      |      1120|          0.27|   9.49|  3.27|  3.3|   7.39|   8.57|  10.47|  21.99|‚ñÇ‚ñá‚ñÇ‚ñÅ‚ñÅ |\n\n\n:::\n:::\n\n\n\n\nEsta funci√≥n nos proporciona informaci√≥n sobre las variables del conjunto de datos, incluyendo el tipo de variable, el n√∫mero de observaciones, el n√∫mero de valores faltantes (NA), la media, la desviaci√≥n est√°ndar, los valores m√≠nimos y m√°ximos, y los cuartiles.\n\nTenemos 2 variables num√©ricas que son el di√°metro y la altura de los √°rboles, y 2 variables categ√≥ricas que son la especie (*Pinus nigra* o *Pinus sylvestris*) y un identificador de la parcela de inventario (27 parcelas distintas). Para el di√°metro, tenemos un total de 12 valores ausentes (NA) que son aproximadamente un 1% de los datos. Para la altura, tenemos 1120 valores ausentes, que son aproximadamente un 73% de los datos. En este sentido, es importante tener en cuenta que los valores ausentes pueden afectar a los an√°lisis y visualizaciones que realicemos con los datos.\n\n::: callout-note\nAunque estos datos tengan una estructura muy sencilla, nos servir√°n a la perfecci√≥n para los objetivos de este curso. Nuestro objetivo ser√° entender la gram√°tica de gr√°ficos como una base fundamental que nos permitir√° transmitir el mensaje que deseemos con nuestros datos.\n:::\n\n## Gram√°tica de gr√°ficos {#sec-gog}\n\nLa gram√°tica de gr√°ficos es un conjunto de reglas que definen c√≥mo se pueden construir gr√°ficos a partir de componentes b√°sicos, y fue creada por @gog. La idea de crear una gram√°tica de gr√°ficos es que, al igual que en la gram√°tica de un idioma, se pueden combinar diferentes elementos para crear gr√°ficos complejos. Cuando aprendemos a hablar un idioma, aprendemos las reglas gramaticales y el vocabulario, y con estos elementos podemos crear frases y textos. De la misma forma, al aprender la gram√°tica de gr√°ficos, podemos crear gr√°ficos complejos a partir de componentes b√°sicos.\n\nPosteriormente se cre√≥ `{ggplot2}` [@layered-grammar], que utiliza las reglas gramaticales de la gram√°tica de gr√°ficos para crear gr√°ficos en R. `{ggplot2}` se basa en la idea de que un gr√°fico se puede construir a partir de **capas**, y cada capa se puede a√±adir al gr√°fico para a√±adir informaci√≥n adicional.\n\n## Componentes {#sec-components}\n\nLa gram√°tica de gr√°ficos tiene una serie de componentes diferenciados [@fig-layers] que se definen en @layered-grammar. Estos componentes son:\n\n-   **Datos (*data*)**: conjunto de datos que utilizamos para generar el gr√°fico.\n\n-   **Geometr√≠as (*geom*)**: se refiere a la forma de representaci√≥n de nuestros datos. Algunos ejemplos de geometr√≠as son: puntos, l√≠neas, histograma, diagramas de caja, etc.\n\n-   **Est√©ticas (*aes*)**: tambi√©n denominados *aesthetic mappings*. Se refiere a los elementos que definen la est√©tica de las geometr√≠as. Si ponemos el ejemplo de un gr√°fico de puntos (*scatter plot*), las est√©ticas pueden ser: su forma (punto, rect√°ngulo, tri√°ngulo...), su tama√±o, color, transparencia ...\n\n-   **Transformaciones estad√≠sticas (*stat*)**:se refiere al estad√≠stico utilizado para resumir nuestros datos. Por ejemplo, para crear un histograma resumimos nuestros datos en intervalos (*bins*) y contamos el n√∫mero de observaciones que existen dentro de este intervalo. Este componente es m√°s avanzado que el resto, por lo que trabajaremos solamente con los valores que vienen por defecto.\n\n-   **Escalas (*scale*)**: transforman los valores de los datos en est√©ticas. Nos permiten controlar los colores, tama√±os, formas, etc. Tambi√©n nos permiten controlar aspectos de las leyendas y ejes.\n\n::: callout-important\nExiste una escala por cada est√©tica utilizada.\n:::\n\n-   **Facetas (*facets*)**: consiste en generar subgr√°ficos seg√∫n un atributo. Por ejemplo, utilizando nuestros datos de inventario, podemos generar un gr√°fico de puntos donde representemos la relaci√≥n di√°metro-altura para todos los datos, o bien podemos generar facetas que generen un gr√°fico por cada una de las especies (es decir, un *scatter plot* para *P. nigra* y otro distinto para *P. sylvestris*).\n\n-   **Coordenadas (*coord*)**: sistema de coordenadas utilizado para mapear los datos. Por defecto y normalmente, utilizaremos el sistema de coordenadas cartesiano. Otros sistemas disponibles son el sistema de coordenadas polares (que nos permiten crear los incre√≠bles gr√°ficos circulares), o tambi√©n sistemas de referencia de coordenadas para generar mapas (s√≠, con `{ggplot2}` podemos generar mapasüó∫Ô∏è).\n\n-   **Tema (*theme*)**: nos permite controlar todos los aspectos relacionados con la apariencia del gr√°fico, como puede ser la fuente de texto, tama√±o de fuente, posici√≥n de elementos como la leyenda, colores de relleno, etc.\n\n![Componentes principales de la gram√°tica de gr√°ficos](images/layers.png){#fig-layers fig-align=\"center\"}\n\nFinalmente, podemos definir una **capa** como la combinaci√≥n de datos, est√©ticas, geometr√≠as y transformaciones estad√≠sticas [@book-ggplot2], y en la mayor√≠a de las ocasiones, estos cuatro componentes se especificar√°n dentro de una funci√≥n que comienza por `geom_*`, aunque los datos y las est√©ticas tambi√©n se pueden especificar dentro de la funci√≥n `ggplot()`. No os preocup√©is, pronto veremos las diferencias entre estas opciones.\n\n::: callout-important\nUn mismo gr√°fico puede contener m√°s de una capa y estas capas pueden (o no) compartir los mismo datos:\n\n-   Capa 1: utiliza los datos de inventario, como est√©ticas utiliza las variables `DBH_mm` y `height_m`, la geometr√≠a de punto y como transformaci√≥n estad√≠stica utiliza **identity**. Esta transformaci√≥n es utilizada por muchas geometr√≠as y significa que va a utilizar los valores tal cual aparecen en la tabla de datos, sin realizar ninguna transformaci√≥n. En t√©rminos matem√°ticos significa que $f(x)= x$.\n\n-   Capa 2: utiliza los datos de inventario, como est√©ticas utiliza las variables `DBH_mm` y `height_m`, la geometr√≠a de l√≠nea y como transformaci√≥n estad√≠stica utiliza **smooth**. Esta transformaci√≥n utiliza un m√©todo de suavizado (por defecto una [Regresi√≥n Local (](https://es.wikipedia.org/wiki/Regresi%C3%B3n_local)[LOESS](https://es.wikipedia.org/wiki/Regresi%C3%B3n_local){target=\"_blank\"}[)](https://es.wikipedia.org/wiki/Regresi%C3%B3n_local)) donde se genera una l√≠nea que aproxima la tendencia de los datos.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\nEl tipo de gr√°fico viene definido por dos elementos: el tipo de geometr√≠a y la transformaci√≥n estad√≠stica. Por poner un ejemplo relacionado con el anterior:\n\n-   **Gr√°fico de l√≠neas**: se define por una geometr√≠a de l√≠nea y una transformaci√≥n estad√≠stica ***identity*** (`geom_line(stat = \"identity\")`).\n\n-   **Gr√°fico suavizado**: utiliza la geometr√≠a de l√≠nea y una transformaci√≥n estad√≠stica ***smooth*** (`geom_line(stat = \"smooth\")`).\n\nNo obstante, los gr√°ficos comunes como el gr√°fico suavizado vienen incluidos en `{ggplot2}` a trav√©s de una funci√≥n que utiliza la transformaci√≥n estad√≠stica adecuada por defecto, y solamente nos har√° falta llamar a la funci√≥n adecuada sin utilizar el argumento `stat`:\n\n| Funci√≥n       | T.E. por defecto |\n|---------------|------------------|\n| geom_line()   | identity         |\n| geom_smooth() | smooth           |\n\n## Ejemplo r√°pido {#sec-first-example}\n\nPara digerir los conceptos anteriores, vamos a ver un ejemplo r√°pido. Para este ejemplo, vamos a eliminar los valores ausentes, ya que el objetivo es solamente entender los conceptos anteriores y no generar un gr√°fico para publicar.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl <- na.omit(inventario_tbl)\nprint(inventario_completo_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 418 √ó 4\n   id_plots dbh_mm height_m nombre_ifn      \n   <fct>     <int>    <dbl> <fct>           \n 1 0           296     9.26 Pinus sylvestris\n 2 0           303    10.1  Pinus sylvestris\n 3 0           105     5.48 Pinus sylvestris\n 4 0           138     7.07 Pinus nigra     \n 5 0           153     7.54 Pinus sylvestris\n 6 0           233     9.60 Pinus sylvestris\n 7 0           140     7.01 Pinus sylvestris\n 8 0           200     7.36 Pinus sylvestris\n 9 0           210    10.1  Pinus sylvestris\n10 0           142     6.25 Pinus sylvestris\n# ‚Ñπ 408 more rows\n```\n\n\n:::\n:::\n\n\n\n\nDe este modo nos quedamos con 418 observaciones.\n\n::: panel-tabset\n## L√≠neas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![Ejemplo b√°sico de gr√°fico de l√≠neas](1003_first_steps_files/figure-html/fig-example-line-1.png){#fig-example-line width=672}\n:::\n:::\n\n\n\n\n## Suavizado 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_line(\n        stat = \"smooth\"\n    )\n```\n\n::: {.cell-output-display}\n![Ejemplo b√°sico de l√≠nea suavizada con geom_line()](1003_first_steps_files/figure-html/fig-example-suave1-1.png){#fig-example-suave1 width=672}\n:::\n:::\n\n\n\n\n## Suavizado 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![Ejemplo b√°sico de l√≠nea suavizada con geom_smooth()](1003_first_steps_files/figure-html/fig-example-suave2-1.png){#fig-example-suave2 width=672}\n:::\n:::\n\n\n\n:::\n\nCompara las tres gr√°ficas. En @fig-example-line no utilizamos el argumento `stat` ya que el que viene por defecto es `identity`. Del mismo modo, en @fig-example-suave2 tampoco es necesario utilizar el argumento ya que `stat = \"smooth\"` viene por defecto.\n\n::: callout-note\nEn este curso no vamos a trabajar con transformaciones estad√≠sticas en mayor profundidad. Esta secci√≥n solamente quiere remarcar que detr√°s de cada geometr√≠a existe una transformaci√≥n estad√≠stica que viene dada por defecto.\n:::\n\nTambi√©n te habr√°s dado cuenta de que no hemos utilizado los componentes: facetas, escalas, coordenadas ni tema. Esto se debe a que estos componentes **siempre**, en **todos los gr√°ficos** tienen un valor por defecto. Pero todo a su tiempo. Vamos a empezar desengranando el c√≥digo anterior. Para tener una idea de los argumentos que estamos utilizando vamos a comparar los siguientes gr√°ficos derivados de @fig-example-suave2:\n\n::: panel-tabset\n## M√©todo 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data    = inventario_completo_tbl,\n    mapping = aes(x = dbh_mm, y = height_m)\n) +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## M√©todo 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(inventario_completo_tbl, aes(x = dbh_mm, y = height_m)) +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## M√©todo 3\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    inventario_completo_tbl, \n    aes(x = dbh_mm, y = height_m)\n) +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n## M√©todo 4\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\nComo veis, el resultado es exactamente el mismo. Normalmente utilizaremos el *pipe operator* (`|>` o `%>%`) como hacemos en el m√©todo 4 para inyectar los datos en el primer argumento de la funci√≥n `ggplot()` que es `data`. El argumento `mapping` tambi√©n se sabe perfectamente que es el segundo argumento de la funci√≥n, por lo que no es necesario escribir `mapping = ...` si no directamente `aes(...)`. En resumen, cualquier m√©todo de escritura de c√≥digo de los anteriores se adecua en mayor o menor medida a los principios de dise√±o ordenado [@tidy-data]. No obstante, los m√©todos m√°s adecuados ser√°n los m√©todos 3 y 4 ya que nos ayudar√°n a que nuestro c√≥digo sea m√°s legible dado que la indentaci√≥n nos ayuda a ver a qu√© funci√≥n pertenece cada argumento y har√° que nuestro c√≥digo sea mucho m√°s f√°cil de leer y mantener. Finalmente, para a√±adir componentes a nuestro gr√°fico utilizamos el operador matem√°tico `+`.\n\n::: callout-warning\nDesgraciadamente, mucha gente utiliza el m√©todo 2 para escribir c√≥digo. Aunque en el ejemplo anterior no es algo grave, es una mala costumbre para muchos otros casos. Entiendes el siguiente c√≥digo?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(select(filter(inventario_completo_tbl, dbh_mm >= 300), dbh_mm:nombre_ifn), nombre_ifn == \"Pinus sylvestris\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 29 √ó 3\n   dbh_mm height_m nombre_ifn      \n    <int>    <dbl> <fct>           \n 1    303     10.1 Pinus sylvestris\n 2    309     10.3 Pinus sylvestris\n 3    494     14.3 Pinus sylvestris\n 4    335     18.9 Pinus sylvestris\n 5    300     12.3 Pinus sylvestris\n 6    326     15.1 Pinus sylvestris\n 7    325     14.7 Pinus sylvestris\n 8    343     14.9 Pinus sylvestris\n 9    329     11.6 Pinus sylvestris\n10    328     18.9 Pinus sylvestris\n# ‚Ñπ 19 more rows\n```\n\n\n:::\n:::\n\n\n\n\nY si lo escribo de este modo?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(\n    select(\n        filter(\n            inventario_completo_tbl, dbh_mm >= 300\n        ), \n        dbh_mm:nombre_ifn), \n    nombre_ifn == \"Pinus sylvestris\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 29 √ó 3\n   dbh_mm height_m nombre_ifn      \n    <int>    <dbl> <fct>           \n 1    303     10.1 Pinus sylvestris\n 2    309     10.3 Pinus sylvestris\n 3    494     14.3 Pinus sylvestris\n 4    335     18.9 Pinus sylvestris\n 5    300     12.3 Pinus sylvestris\n 6    326     15.1 Pinus sylvestris\n 7    325     14.7 Pinus sylvestris\n 8    343     14.9 Pinus sylvestris\n 9    329     11.6 Pinus sylvestris\n10    328     18.9 Pinus sylvestris\n# ‚Ñπ 19 more rows\n```\n\n\n:::\n:::\n\n\n\n\nY de este?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    filter(dbh_mm >= 300) |> \n    select(dbh_mm:nombre_ifn) |> \n    filter(nombre_ifn == \"Pinus sylvestris\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 29 √ó 3\n   dbh_mm height_m nombre_ifn      \n    <int>    <dbl> <fct>           \n 1    303     10.1 Pinus sylvestris\n 2    309     10.3 Pinus sylvestris\n 3    494     14.3 Pinus sylvestris\n 4    335     18.9 Pinus sylvestris\n 5    300     12.3 Pinus sylvestris\n 6    326     15.1 Pinus sylvestris\n 7    325     14.7 Pinus sylvestris\n 8    343     14.9 Pinus sylvestris\n 9    329     11.6 Pinus sylvestris\n10    328     18.9 Pinus sylvestris\n# ‚Ñπ 19 more rows\n```\n\n\n:::\n:::\n\n\n\n\nComo ves, tres formas de escribir el mismo c√≥digo aumentando la legibilidad del mismo. Estos principios se utilizar√°n a lo largo de este curso. Una lectura muy recomendable es [The tidyverse style guide](https://style.tidyverse.org/index.html){target=\"_blank\"}.\n:::\n\n## Herencia de est√©ticas {#sec-inheritance-aes}\n\nVamos a continuar con el ejemplo de la l√≠nea suavizada. Vamos a a√±adir otra capa donde se muestre la distribuci√≥n de las observaciones con una geometr√≠a de punto:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_point() +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\nEn este ejemplo estamos viendo una propiedad **MUY IMPORTANTE** en relaci√≥n a la generaci√≥n de gr√°ficos con `{ggplot2}`. Dentro de la funci√≥n `ggplot()` introducimos las est√©ticas y los datos. En siguiente lugar, las geometr√≠as **heredan** estos elementos. Es decir, este gr√°fico podr√≠a ser algo m√°s verboso del siguiente modo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n    geom_point(\n        data = inventario_completo_tbl,\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_smooth(\n        data = inventario_completo_tbl,\n        aes(x = dbh_mm, y = height_m)\n    ) \n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\nEn este caso, estamos especificando los datos y las est√©ticas en cada una de las geometr√≠as. Aunque esto es posible, no es recomendable ya que aumenta la longitud del c√≥digo y puede llevar a errores si no se especifican correctamente los datos y las est√©ticas en cada una de las geometr√≠as. No obstante, en muchos casos es necesario especificar los datos y las est√©ticas en cada una de las geometr√≠as, ya que pueden utilizar est√©ticas diferentes o incluso datos diferentes. Vamos a ver un caso sencillo donde queremos representar la relaci√≥n entre el di√°metro y la altura de los √°rboles, pero queremos que los puntos de una especie sean de un color diferente a los de la otra especie. Vamos a ver una serie de ejemplos:\n\n::: panel-tabset\n## Color - Todos\n\nEn este caso introducimos la est√©tica `color` dentro de la funci√≥n de `ggplot()`. En este caso **todas las geometr√≠as** heredan las est√©ticas:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m, color = nombre_ifn)\n    ) +\n    geom_point() +\n    geom_smooth() \n```\n\n::: {.cell-output-display}\n![Ejemplo de scatter plot y l√≠nea de tendencia con est√©tica de color para ambas geometr√≠as](1003_first_steps_files/figure-html/fig-example-color-combined-1.png){#fig-example-color-combined width=672}\n:::\n:::\n\n\n\n\n## Color - Puntos\n\nEn este otro caso, introducimos la est√©tica `color` solamente dentro de la funci√≥n `geom_point()`, por lo que solamente los puntos utilizan esta est√©tica:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_point(aes(color = nombre_ifn)) +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![Ejemplo de scatter plot y l√≠nea de tendencia con est√©tica de color para la geometr√≠a de punto](1003_first_steps_files/figure-html/fig-example-color-point-1.png){#fig-example-color-point width=672}\n:::\n:::\n\n\n\n\n## Color - Smooth\n\nEn este √∫ltimo caso, a√±adimos la est√©tica `color` a funci√≥n `geom_smooth()`, por lo que solamente se colorean las l√≠neas de tendencia:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_point() +\n    geom_smooth(aes(color = nombre_ifn))\n```\n\n::: {.cell-output-display}\n![Ejemplo de scatter plot y l√≠nea de tendencia con est√©tica de color para la geometr√≠a de la l√≠nea de tendencia](1003_first_steps_files/figure-html/fig-example-color-smooth-1.png){#fig-example-color-smooth width=672}\n:::\n:::\n\n\n\n:::\n\nTambi√©n puedes ver que en los ejemplos anteriores, la geometr√≠a de punto la escribimos antes que la l√≠nea de tendencia. De este modo se dibujan en el gr√°fico, primero los puntos, y en siguiente lugar se dibuja la l√≠nea de tendencia sobre los puntos.\n\n## Mapear y asignar est√©ticas {#sec-map-assign-aes}\n\nPara finalizar este cap√≠tulo, vamos a ver dos conceptos que al principio pueden parecer un poco confusos, pero que ver√©is que tienen todo el sentido del mundo dentro de la gram√°tica de gr√°ficos. Vamos a comenzar viendo estas dos frases que inicialmente no tendr√°n mucho sentido, pero que entenderemos al final de esta secci√≥n:\n\n-   Mapeamos est√©ticas a variables\n\n-   Asignamos est√©ticas a valores constantes\n\nVamos a seguir trabajando con la geometr√≠a de puntos, ya que es una de las m√°s sencillas para aprender la teor√≠a. Si busc√°is en la documentaci√≥n oficial de las funciones `geom_*`, encontrar√©is una secci√≥n de est√©ticas como la que se muestra en la @fig-aes-point:\n\n![Est√©titcas de la geometr√≠a de punto (geom_point)](images/esteticas-punto.png){#fig-aes-point fig-align=\"center\"}\n\n::: callout-important\nTodas las geometr√≠as tienen una serie de est√©ticas obligatorias y otras opcionales. Para la geometr√≠a de punto las obligatorias son **x** e **y**\n:::\n\nTODAS estas est√©ticas se pueden mapear a variables, es decir, todas pueden ir dentro de la funci√≥n `aes(x, y, alpha, color, fill ...)`. Siempre que vayan dentro de la funci√≥n `aes()`, estaremos mapeando la est√©tica a una variable, y por lo tanto, el valor de la est√©tica debe ser una variable de nuestros datos como en el siguiente exagerado ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(\n            x     = dbh_mm,\n            y     = height_m,\n            color = nombre_ifn,\n            shape = nombre_ifn,\n            size  = height_m\n        )\n    ) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\nSin embargo, algunas de las est√©ticas tambi√©n se pueden **asignar a valores constantes**. Es decir, en lugar de generar un color de punto por cada especie, podemos elegir que todos los puntos sean de color verde oscuro. O que la forma de todos los puntos sea triangular. En este caso hablamos de asignar constantes, y las est√©ticas se escriben **dentro de la funci√≥n de `geom_*` y fuera de `aes()`**:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_point(\n        color = \"darkgreen\",\n        shape = \"triangle\",\n        size  = 3\n    )\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\nEn este sentido, algo que **NO** podemos hacer y que suele ser un fallo com√∫n al empezar con `{ggplot2}` es lo siguiente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_point(\n        color = nombre_ifn\n    )\n```\n:::\n\n\n\n\nNos dar√° el error \"*Error : objeto 'nombre_ifn' no encontrado*\". Como `color` est√° fuera de `aes()`, la funci√≥n est√° buscando si en el entorno existe el objeto `nombre_ifn`. Para entender este concepto, vamos a ver el siguiente c√≥digo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Asignar un color a un objeto\nnombre_ifn <- \"#456435\"\n## Gr√°fico\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m)\n    ) +\n    geom_point(\n        color = nombre_ifn\n    )\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\nCuando una est√©tica se encuentra fuera de `aes()`, no busca `nombre_ifn` dentro de las columnas de los datos, si no que lo busca en el *Global Environment*. Finalmente, tampoco podemos introducir constantes dentro de `aes()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m, color = \"blue\")\n    ) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\nEsto no funciona porque lo que hace es crear una variable constante cuyos valores son \"blue\". Es decir, esto es equivalente a:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    mutate(\n        colour = \"blue\"\n    ) |> \n    ggplot(\n        aes(x = dbh_mm, y = height_m, color = colour)\n    ) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](1003_first_steps_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\nEs decir, no tiene nada de sentido. Para finalizar, vamos a resumir esta secci√≥n de nuevo en las frases que ve√≠amos al inicio:\n\n-   Mapeamos est√©ticas a variables\n\n-   Asignamos est√©ticas a valores constantes\n\n\n## Referencias {.unnumbered}\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "1003_first_steps_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}