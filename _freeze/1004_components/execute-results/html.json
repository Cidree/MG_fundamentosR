{
  "hash": "dbd519ea54c1ff4c491c2f20416ec58d",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n# Componentes\n\nEste capítulo tiene el objetivo de mostrar los componentes de un gráfico en `{ggplot2}`. Utilizaremos un ejemplo sencillo y exploraremos sus componentes. No será un capítulo impresionante, pero nos ayudará a entender qué funciones utiliza `{ggplot2}` por defecto según el tipo de datos que grafiquemos.\n\n## Capas\n\nEn primer lugar, vamos a generar un gráfico utilizando los datos del inventario forestal visto en el capítulo anterior, donde mostraremos la relación entre la altura y el diámetro de los árboles por especie.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Crear gráfico\nbase_gg <- inventario_completo_tbl |> \n    ggplot(\n      aes(x = dbh_mm, y = height_m, color = nombre_ifn)\n    ) +\n    geom_point()\n## Imprimir gráfico\nbase_gg\n```\n\n::: {.cell-output-display}\n![Gráfico con capas](1004_components_files/figure-html/fig-components-layer-1.png){#fig-components-layer width=672}\n:::\n:::\n\n\n\n\n## Facetas\n\nLas facetas son una forma de dividir un gráfico en subgráficos, de acuerdo a una variable categórica. Por defecto, `{ggplot2}` utiliza la función `facet_null()` que indica que no se desea dividir el gráfico. Para comprobar que esto es cierto, vamos a añadir esta función al gráfico anterior.\n\n::: callout-tip\nUna característica de `{ggplot2}` es que podemos guardar el gráfico en un objeto y añadir capas adicionales posteriormente.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Añadir facetas\nfacets_gg <- base_gg + \n    facet_null()\n## Imprimir gráfico\nfacets_gg\n```\n\n::: {.cell-output-display}\n![Gráfico sin facetas](1004_components_files/figure-html/fig-components-facet-1.png){#fig-components-facet width=672}\n:::\n:::\n\n\n\n\nVemos que el resultado de la @fig-components-facet es exactamente igual al de la @fig-components-layer. En el capítulo <!--# añadir referencia --> veremos otras opciones de facetas.\n\n## Escalas\n\nLas escalas se encargar de mapear los valores de los datos a los valores estéticos [@layered-grammar]. En nuestro gráfico, hemos utilizado un total de tres estéticas:\n\n-   `x`: diámetro del árbol en milímetros\n-   `y`: altura del árbol en metros\n-   `color`: especie del árbol\n\nPor ello, por defecto se genera una escala para cada una de estas estéticas. Vamos a ver las que se generan por defecto:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##  Añadir escalas\nscales_gg <- base_gg + \n    scale_x_continuous() +\n    scale_y_continuous() +\n    scale_color_discrete()\n## Imprimir gráfico\nscales_gg\n```\n\n::: {.cell-output-display}\n![Escalas por defecto](1004_components_files/figure-html/fig-components-scale-1.png){#fig-components-scale width=672}\n:::\n:::\n\n\n\n\nVemos varias cosas interesantes en el código que hemos añadido:\n\n-   Las funciones de escalas empiezan por `scale_*` \n-   En siguiente lugar, se añade el nombre de la estética que se quiere modificar\n-   Finalmente, se añaden los argumentos necesarios para modificar la escala\n\nEl tercer punto es importante. Si tenemos una variable numérica, su escala será `scale_*_continuous()`, mientras que si es categórica, será `scale_*_discrete()`. \n\nVeremos los detalles de las escalas en el capítulo <!--# añadir referencia -->.\n\n## Coordenadas\n\nLas coordenadas definen cómo se representan los datos en el gráfico. Por defecto, `{ggplot2}` utiliza un sistema de coordenadas cartesianas. Vamos a ver cómo se ve nuestro gráfico con las coordenadas por defecto.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Añadir coordenadas\ncoord_gg <- base_gg + \n    coord_cartesian()\n## Imprimir gráfico\ncoord_gg\n```\n\n::: {.cell-output-display}\n![Coordenadas por defecto](1004_components_files/figure-html/fig-components-coord-1.png){#fig-components-coord width=672}\n:::\n:::\n\n\n\n\nDe nuevo, vemos que no se ha modificado el gráfico. Las funciones de coordenadas empiezan por `coord_*`, y en el capítulo <!--# añadir referencia --> veremos otras opciones de coordenadas.\n\n## Temas\n\nLos temas definen el aspecto visual del gráfico. Por defecto, `{ggplot2}` utiliza el tema `theme_gray()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Añadir tema\ntheme_gg <- base_gg + \n    theme_gray() +\n    theme()\n## Imprimir gráfico\ntheme_gg\n```\n\n::: {.cell-output-display}\n![Tema por defecto](1004_components_files/figure-html/fig-components-theme-1.png){#fig-components-theme width=672}\n:::\n:::\n\n\n\n\nEn el código anterior vemos dos funciones:\n\n-   `theme_*`: se utilizan para aplicar un tema predeterminado que trae una serie de valores de los temas por defecto.\n\n-   `theme()`: se utiliza para personalizar propiedades de forma unitaria.\n\nDe nuevo, veremos los detalles de los temas en el capítulo <!--# añadir referencia -->.\n\n## Resumen\n\nEn este capítulo hemos visto los componentes de un gráfico en `{ggplot2}` que vienen por defecto. Vamos a unir todo lo que vimos en un bloque de código:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_completo_tbl |> \n    ## Añadir capas\n    ggplot(\n      aes(x = dbh_mm, y = height_m, color = nombre_ifn)\n    ) +\n    geom_point() +\n    ## Añadir facetas\n    facet_null() +\n    ## Añadir escalas\n    scale_x_continuous() +\n    scale_y_continuous() +\n    scale_color_discrete() +\n    ## Añadir coordenadas\n    coord_cartesian() +\n    ## Añadir tema\n    theme_gray() +\n    theme()\n```\n\n::: {.cell-output-display}\n![Gráfico con todos los componentes](1004_components_files/figure-html/fig-components-all-1.png){#fig-components-all width=672}\n:::\n:::\n\n\n\n## Referencias {.unnumbered}\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "1004_components_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}