{
  "hash": "7c7a3cbbc225d61d860fc05b4b1ced9a",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\nfilters: \n    - webr\nwebr:\n    packages: [\"dplyr\", \"ggplot2\"]\n---\n\n\n\n\n# Gráficos de comparación {#sec-comparison-plots}\n\nLos gráficos de comparación son una forma de visualizar diferencias entre grupos o categorías, o también para comparar cambios en el tiempo. Siguiendo la @fig-vis-classification, los gráficos de comparación que veremos en este libro son:\n\n1.  **Gráfico de barras** (*bar plot*): se utiliza para comparar la frecuencia o valor de una variable categórica.\n\n2.  **Gráfico de líneas** (*line plot*): se utiliza para comparar cambios en una variable numérica a lo largo del tiempo.\n\nEn este capítulo vamos a trabajar con tres *datasets*:\n\n-   `iris`: *dataset* donde se han medido la longitud y anchura de pétalos y sépalos de 150 flores, además de la especie a la que pertenecen (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}).\n\n-   `gapminder`: *dataset* con la evolución temporal del desarrollo económico, población y esperanza de vida de los países del mundo (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}).\n\n-   `inventario`: *dataset* con datos de inventario de 27 parcelas en los que se ha medido el DBH, altura y especie (ver @sec-vis-data).\n\nPara comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar paquetes\nlibrary(gapminder)\nlibrary(tidyverse)\n# Cargar datos\ninventario_tbl <- read_rds(\"data/inventario_prep.rds\")\ngapminder_tbl <- gapminder |> \n    filter(year == 2002)\n```\n:::\n\n\n\n\n## Objetivos\n\nAl final de este capítulo serás capaz de:\n\n-   Crear gráficos de barras para comparar la frecuencia de una variable categórica.\n\n-   Crear gráficos de líneas para comparar cambios en una variable numérica a lo largo del tiempo.\n\n## Gráfico de barras\n\nEl gráfico de barras es una de las formas más comunes de visualizar la frecuencia de una variable categórica. En este caso, vamos a utilizar el *dataset* de `iris` para comparar la frecuencia de las especies de flores. Para ello, tenemos dos funciones que nos permiten crear gráficos de barras:\n\n-   `geom_bar()`: utiliza `stat = \"count\"` para contar la frecuencia de cada categoría. Solamente necesita definir una estética (`x` o `y`)\n\n-   `geom_col()`: utiliza `stat = \"identity\"` para representar los valores de la variable. Necesita definir dos estéticas (`x` e `y`)\n\nVamos a generar el mismo gráfico utilizando ambas funciones para ver la diferencia. El gráfico que generaremos será la frecuencia de las especies de flores en el *dataset* de `iris`.\n\n::: panel-tabset\n## geom_bar()\n\nComo vemos, solamente indicamos la estética `x`. Como existen 50 flores de cada especie, simplemente nos da ese número para cada especie.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n    ggplot(aes(x = Species)) +\n    geom_bar() +\n    labs(\n        title = \"Frecuencia de especies de flores\",\n         x    = \"Especies\",\n         y    = \"Frecuencia\"\n    )\n```\n\n::: {.cell-output-display}\n![Gráfico de barras generado con `geom_bar()` para la frecuencia de las especies de Iris](1104_comparison_files/figure-html/fig-comparison-bar-example-1.png){#fig-comparison-bar-example width=672}\n:::\n:::\n\n\n\n\n## geom_col()\n\nEn este caso, necesitamos calcular primero los valores que queremos mostrar:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Calcular frecuencias\niris_count <- count(iris, Species)\n## Imprimir\niris_count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Species  n\n1     setosa 50\n2 versicolor 50\n3  virginica 50\n```\n\n\n:::\n:::\n\n\n\n\nUna vez tenemos los valores, vamos a generar el mismo gráfico. Fíjate que tenemos que añadir la estética `y` para decirle donde tiene que buscar los valores.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_count |> \n    ggplot(aes(x = Species, y = n)) +\n    geom_col() +\n    labs(\n        title = \"Frecuencia de especies de flores\",\n         x    = \"Especies\",\n         y    = \"Frecuencia\"\n    )\n```\n\n::: {.cell-output-display}\n![Gráfico de barras generado con `geom_col()` para la frecuencia de las especies de Iris](1104_comparison_files/figure-html/fig-comparison-col-example-1.png){#fig-comparison-col-example width=672}\n:::\n:::\n\n\n\n:::\n\nPues esta es la forma más básica de generar un gráfico de barras. Vamos a ver algo más interesante.\n\n### Position\n\nRecuerdas cuando utilizamos `geom_jitter()`, que dijimos que era lo mismo que `geom_point(position = \"jitter\")`? Pues resulta que `position` es un argumento muy importante en los gráficos de barras para definir cómo se van a posicionar las barras. Esto cobra importancia cuando mapeamos una variable a la estética `fill`. Vamos a utilizar los datos de `gapminder` para los años mayores a 1990 y comparar el PIB per cápita de algunos países europeos.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Filtrar datos\ngapminder_tbl <- gapminder |> \n    filter(year > 1990) |>\n    filter(country %in% c(\"Spain\", \"Germany\", \"France\", \"Italy\", \"Portugal\")) |>\n    mutate(\n        year = as.factor(year)\n    ) \n## Imprimir\ngapminder_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 6\n   country  continent year  lifeExp      pop gdpPercap\n   <fct>    <fct>     <fct>   <dbl>    <int>     <dbl>\n 1 France   Europe    1992     77.5 57374179    24704.\n 2 France   Europe    1997     78.6 58623428    25890.\n 3 France   Europe    2002     79.6 59925035    28926.\n 4 France   Europe    2007     80.7 61083916    30470.\n 5 Germany  Europe    1992     76.1 80597764    26505.\n 6 Germany  Europe    1997     77.3 82011073    27789.\n 7 Germany  Europe    2002     78.7 82350671    30036.\n 8 Germany  Europe    2007     79.4 82400996    32170.\n 9 Italy    Europe    1992     77.4 56840847    22014.\n10 Italy    Europe    1997     78.8 57479469    24675.\n11 Italy    Europe    2002     80.2 57926999    27968.\n12 Italy    Europe    2007     80.5 58147733    28570.\n13 Portugal Europe    1992     74.9  9927680    16207.\n14 Portugal Europe    1997     76.0 10156415    17641.\n15 Portugal Europe    2002     77.3 10433867    19971.\n16 Portugal Europe    2007     78.1 10642836    20510.\n17 Spain    Europe    1992     77.6 39549438    18603.\n18 Spain    Europe    1997     78.8 39855442    20445.\n19 Spain    Europe    2002     79.8 40152517    24835.\n20 Spain    Europe    2007     80.9 40448191    28821.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_tbl |> \n    ggplot(aes(x = year, y = gdpPercap, fill = country)) +\n    geom_col() +\n    labs(\n        x    = NULL,\n        y    = \"PIB per cápita\",\n        fill = NULL\n    ) +\n    scale_fill_viridis_d() +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![Gráfico de barras por defecto. Evolución temporal del PIB per cápita en algunos países europeos](1104_comparison_files/figure-html/fig-col-gapminder-1.png){#fig-col-gapminder width=672}\n:::\n:::\n\n\n\n\nComo ves, por defecto las barras se ponen unas encima de otras. Este comportamiento viene definido por el argumento `position`, cuyas opciones son:\n\n-   `position = position_stack()`: valor por defecto. Las barras se acumulan unas encima de otras.\n\n-   `position = position_dodge()`: las barras se separan unas de otras.\n\n-   `position = position_dodge2()`: las barras se separan unas de otras y se ajustan al ancho de la barra.\n\nEn la siguiente aplicación puedes experimentar para ver el comportamiento con los diferentes valores de `position`.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\n## Load packages\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        selectInput(\n            inputId  = \"position_input\",\n            label    = \"Position\",\n            choices  = c(\"dodge\", \"dodge2\", \"fill\", \"identity\", \"nudge\", \"stack\"),\n            selected = \"position_stack()\"\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            gapminder_tbl |> \n                ggplot(aes(x = year, y = gdpPercap, fill = country)) +\n                geom_col(\n                    position = position_{input$position_input}()\n                ) +\n                labs(x = NULL,y = \"PIB per cápita\",fill = NULL) +\n                scale_fill_viridis_d() +\n                theme_bw(base_size = 8)\n            '\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        gapminder |> \n            filter(year > 1990) |>\n            filter(country %in% c(\"Spain\", \"Germany\", \"France\", \"Italy\", \"Portugal\")) |>\n            mutate(year = as.factor(year)) |> \n            ggplot(aes(x = year, y = gdpPercap, fill = country)) +\n            geom_col(\n                position = input$position_input\n            ) +\n            labs(\n                x    = NULL,\n                y    = \"PIB per cápita\",\n                fill = NULL\n            ) +\n            scale_fill_viridis_d() +\n            theme_bw(base_size = 8)\n        }, res = 96\n    )\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n",
    "supporting": [
      "1104_comparison_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}