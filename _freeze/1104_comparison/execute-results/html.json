{
  "hash": "83557d5e7dbf90223f498d02305efeaf",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\nfilters: \n    - webr\nwebr:\n    packages: [\"dplyr\", \"geomtextpath\", \"ggplot2\"]\n---\n\n\n\n\n# Gráficos de comparación {#sec-comparison-plots}\n\nLos gráficos de comparación son una forma de visualizar diferencias entre grupos o categorías, o también para comparar cambios en el tiempo. Siguiendo la @fig-vis-classification, los gráficos de comparación que veremos en este libro son:\n\n1.  **Gráfico de barras** (*bar plot*): se utiliza para comparar la frecuencia o valor de una variable categórica.\n\n2.  **Gráfico de líneas** (*line plot*): se utiliza para comparar cambios en una variable numérica a lo largo del tiempo.\n\nEn este capítulo vamos a trabajar con tres *datasets*:\n\n-   `iris`: *dataset* donde se han medido la longitud y anchura de pétalos y sépalos de 150 flores, además de la especie a la que pertenecen (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}).\n\n-   `gapminder`: *dataset* con la evolución temporal del desarrollo económico, población y esperanza de vida de los países del mundo (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}).\n\n-   `inventario`: *dataset* con datos de inventario de 27 parcelas en los que se ha medido el DBH, altura y especie (ver @sec-vis-data).\n\nPara comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar paquetes\nlibrary(gapminder)\nlibrary(geomtextpath)\nlibrary(tidyverse)\n# Cargar datos\ninventario_tbl <- read_rds(\"data/inventario_prep.rds\")\ngapminder_tbl <- gapminder |> \n    filter(year == 2002)\n```\n:::\n\n\n\n\n## Objetivos\n\nAl final de este capítulo serás capaz de:\n\n-   Crear gráficos de barras para comparar la frecuencia de una variable categórica.\n\n-   Crear gráficos de líneas para comparar cambios en una variable numérica a lo largo del tiempo.\n\n## Gráfico de barras\n\nEl gráfico de barras es una de las formas más comunes de visualizar la frecuencia de una variable categórica. En este caso, vamos a utilizar el *dataset* de `iris` para comparar la frecuencia de las especies de flores. Para ello, tenemos dos funciones que nos permiten crear gráficos de barras:\n\n-   `geom_bar()`: utiliza `stat = \"count\"` para contar la frecuencia de cada categoría. Solamente necesita definir una estética (`x` o `y`)\n\n-   `geom_col()`: utiliza `stat = \"identity\"` para representar los valores de la variable. Necesita definir dos estéticas (`x` e `y`)\n\nVamos a generar el mismo gráfico utilizando ambas funciones para ver la diferencia. El gráfico que generaremos será la frecuencia de las especies de flores en el *dataset* de `iris`.\n\n::: panel-tabset\n## geom_bar()\n\nComo vemos, solamente indicamos la estética `x`. Como existen 50 flores de cada especie, simplemente nos da ese número para cada especie.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n    ggplot(aes(x = Species)) +\n    geom_bar() +\n    labs(\n        title = \"Frecuencia de especies de flores\",\n         x    = \"Especies\",\n         y    = \"Frecuencia\"\n    )\n```\n\n::: {.cell-output-display}\n![Gráfico de barras generado con `geom_bar()` para la frecuencia de las especies de Iris](1104_comparison_files/figure-html/fig-comparison-bar-example-1.png){#fig-comparison-bar-example width=672}\n:::\n:::\n\n\n\n\n## geom_col()\n\nEn este caso, necesitamos calcular primero los valores que queremos mostrar:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Calcular frecuencias\niris_count <- count(iris, Species)\n## Imprimir\niris_count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Species  n\n1     setosa 50\n2 versicolor 50\n3  virginica 50\n```\n\n\n:::\n:::\n\n\n\n\nUna vez tenemos los valores, vamos a generar el mismo gráfico. Fíjate que tenemos que añadir la estética `y` para decirle donde tiene que buscar los valores.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_count |> \n    ggplot(aes(x = Species, y = n)) +\n    geom_col() +\n    labs(\n        title = \"Frecuencia de especies de flores\",\n         x    = \"Especies\",\n         y    = \"Frecuencia\"\n    )\n```\n\n::: {.cell-output-display}\n![Gráfico de barras generado con `geom_col()` para la frecuencia de las especies de Iris](1104_comparison_files/figure-html/fig-comparison-col-example-1.png){#fig-comparison-col-example width=672}\n:::\n:::\n\n\n\n:::\n\nPues esta es la forma más básica de generar un gráfico de barras. Vamos a ver algo más interesante.\n\n### Position\n\nRecuerdas cuando utilizamos `geom_jitter()`, que dijimos que era lo mismo que `geom_point(position = \"jitter\")`? Pues resulta que `position` es un argumento muy importante en los gráficos de barras para definir cómo se van a posicionar las barras. Esto cobra importancia cuando mapeamos una variable a la estética `fill`. Vamos a utilizar los datos de `gapminder` para los años mayores a 1990 y comparar el PIB per cápita de algunos países europeos.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Filtrar datos\ngapminder_tbl <- gapminder |> \n    filter(year > 1990) |>\n    filter(country %in% c(\"Spain\", \"Germany\", \"France\", \"Italy\", \"Portugal\")) |>\n    mutate(\n        year = as.factor(year)\n    ) \n## Imprimir\ngapminder_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 6\n   country  continent year  lifeExp      pop gdpPercap\n   <fct>    <fct>     <fct>   <dbl>    <int>     <dbl>\n 1 France   Europe    1992     77.5 57374179    24704.\n 2 France   Europe    1997     78.6 58623428    25890.\n 3 France   Europe    2002     79.6 59925035    28926.\n 4 France   Europe    2007     80.7 61083916    30470.\n 5 Germany  Europe    1992     76.1 80597764    26505.\n 6 Germany  Europe    1997     77.3 82011073    27789.\n 7 Germany  Europe    2002     78.7 82350671    30036.\n 8 Germany  Europe    2007     79.4 82400996    32170.\n 9 Italy    Europe    1992     77.4 56840847    22014.\n10 Italy    Europe    1997     78.8 57479469    24675.\n11 Italy    Europe    2002     80.2 57926999    27968.\n12 Italy    Europe    2007     80.5 58147733    28570.\n13 Portugal Europe    1992     74.9  9927680    16207.\n14 Portugal Europe    1997     76.0 10156415    17641.\n15 Portugal Europe    2002     77.3 10433867    19971.\n16 Portugal Europe    2007     78.1 10642836    20510.\n17 Spain    Europe    1992     77.6 39549438    18603.\n18 Spain    Europe    1997     78.8 39855442    20445.\n19 Spain    Europe    2002     79.8 40152517    24835.\n20 Spain    Europe    2007     80.9 40448191    28821.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_tbl |> \n    ggplot(aes(x = year, y = gdpPercap, fill = country)) +\n    geom_col() +\n    labs(\n        x    = NULL,\n        y    = \"PIB per cápita\",\n        fill = NULL\n    ) +\n    scale_fill_viridis_d() +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![Gráfico de barras por defecto. Evolución temporal del PIB per cápita en algunos países europeos](1104_comparison_files/figure-html/fig-col-gapminder-1.png){#fig-col-gapminder width=672}\n:::\n:::\n\n\n\n\nComo ves, por defecto las barras se ponen unas encima de otras. Este comportamiento viene definido por el argumento `position`, cuyas opciones son:\n\n-   `position = position_stack()`: valor por defecto. Las barras se acumulan unas encima de otras.\n\n-   `position = position_dodge()`: las barras se separan unas de otras.\n\n-   `position = position_dodge2()`: las barras se separan unas de otras con un espacio entre ellas.\n\n-   `position = position_fill()`: muestra el valor relativo de cada clase. Cada barra suma un total de 1 = 100%.\n\n-   `position = position_nudge()`: todas las barras empiezan en 0 y se localizan unas detrás de otras.\n\nEn la siguiente aplicación puedes experimentar para ver el comportamiento con los diferentes valores de `position`.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\n## Load packages\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        selectInput(\n            inputId  = \"position_input\",\n            label    = \"Position\",\n            choices  = c(\"dodge\", \"dodge2\", \"fill\", \"nudge\", \"stack\"),\n            selected = \"stack\"\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            gapminder_tbl |> \n                ggplot(aes(x = year, y = gdpPercap, fill = country)) +\n                geom_col(\n                    position = position_{input$position_input}()\n                ) +\n                labs(x = NULL,y = \"PIB per cápita\",fill = NULL) +\n                scale_fill_viridis_d() +\n                theme_bw(base_size = 8)\n            '\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        gapminder |> \n            filter(year > 1990) |>\n            filter(country %in% c(\"Spain\", \"Germany\", \"France\", \"Italy\", \"Portugal\")) |>\n            mutate(year = as.factor(year)) |> \n            ggplot(aes(x = year, y = gdpPercap, fill = country)) +\n            geom_col(\n                position = input$position_input\n            ) +\n            labs(\n                x    = NULL,\n                y    = \"PIB per cápita\",\n                fill = NULL\n            ) +\n            scale_fill_viridis_d() +\n            theme_bw(base_size = 8)\n        }, res = 96\n    )\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n\nPodemos sacar una serie de conclusiones:\n\n-   `nudge` es un método peligroso por dos motivos:\n\n    -   Puede ser confundido con `stack`\n\n    -   Una barra con valores altos puede ocultar otras barras con valores más bajos, como ocurre en la imagen anterior.\n\n-   `stack` es un método poco efectivo para comunicar. En el ejemplo anterior, España es sencilla de comparar a lo largo de los años. Pero y el resto? Al no estar en la misma escala, hace más complicado que los usuarios de tu gráfica puedan ver los cambios por ejemplo en Italia o Alemania.\n\n-   De los casos vistos, `dodge2` es el mejor. Aún así, es mejorable.\n\n-   `fill`: es una buena opción cuando tiene sentido comparar los grupos en términos relativos (en este caso, no tiene sentido decir que una país tiene el 20% del PIB. El 20% de qué?).\n\n### Buenas prácticas\n\nVamos a volver al ejemplo de las especies de flores en el *dataset* de `iris` [@fig-comparison-bar-example], aunque sea un ejemplo muy sencillo, nos sirve para ver algunas buenas prácticas a la hora de generar gráficos de barras. En lugar de utilizar las 150, vamos a filtrar las 60 aleatorias para que no tengamos el mismo número de flores en cada clase:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Filtrar datos\nset.seed(111)\niris_sample <- iris |> \n    slice_sample(n = 60)\n```\n:::\n\n\n\n\nY ahora vamos a generar el gráfico de barras añadiendo mejoras:\n\n::: panel-tabset\n## Gráifco base\n\nVamos a generar el primer gráfico:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_sample |> \n  ggplot(aes(x = Species)) +\n  geom_bar() +\n  labs(\n      title = \"Frecuencia de especies de flores\",\n       x    = \"Especies\",\n       y    = \"Frecuencia\"\n  )\n```\n\n::: {.cell-output-display}\n![Gráfico de barras generado con `geom_bar()` para la frecuencia de las especies de Iris](1104_comparison_files/figure-html/fig-comparison-bar-example-sample-1.png){#fig-comparison-bar-example-sample width=672}\n:::\n:::\n\n\n\n\n## Mejora 1\n\nVamos a empezar haciendo un par de cambios:\n\n-   Cambiar el color de las barras y el tema.\n\n-   Utilizar barras horizontales: esto suele ayudar mucho a la lectura de este tipo de gráfico, sobre todo cuando tenemos muchas categorías o tienen nombres largos. Para ello podemos o bien utilizar `y = Species` o `coord_flip()` (siendo este segundo el más común para invertir los ejes).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_sample |> \n  ggplot(aes(x = Species)) +\n  geom_bar(fill = \"#98B6B1\") +\n  coord_flip() +\n  labs(\n       x    = NULL,\n       y    = \"Frecuencia\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Gráfico de barras horizontal para la frecuencia de las especies de Iris](1104_comparison_files/figure-html/fig-comparison-bar-example-sample-improve1-1.png){#fig-comparison-bar-example-sample-improve1 width=672}\n:::\n:::\n\n\n\n\n## Mejora 2\n\nEn siguiente lugar, cuando se utilizan gráficos de barras, debemos ordenar las barras siguiendo un orden lógico, que será prácticamente siempre según el tamaño de las barras. Para ello, vamos a utilizar la función `fct_infreq()` del paquete `{forcats}` para ordenar las barras según la frecuencia de las especies.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_sample |> \n  ggplot(\n    aes(x = fct_infreq(Species))\n  ) +\n  geom_bar(fill = \"#98B6B1\") +\n  coord_flip() +\n  labs(\n       x    = NULL,\n       y    = \"Frecuencia\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Gráfico de barras horizontales ordenado de menor a mayor para la frecuencia de las especies de Iris](1104_comparison_files/figure-html/fig-comparison-bar-example-sample-improve2-1.png){#fig-comparison-bar-example-sample-improve2 width=672}\n:::\n:::\n\n\n\n\nAunque esto pueda ser lo que queramos, normalmente querremos ordenar de mayor a menor. Para ello, podemos añadir `fct_rev()` al final de la función, que invierte los niveles de la variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_sample |> \n  ggplot(\n    aes(\n      x = fct_infreq(Species) |> fct_rev()\n    )\n  ) +\n  geom_bar(fill = \"#98B6B1\") +\n  coord_flip() +\n  labs(\n       x    = NULL,\n       y    = \"Frecuencia\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Gráfico de barras horizontales ordenado de mayor a menor para la frecuencia de las especies de Iris](1104_comparison_files/figure-html/fig-comparison-bar-example-sample-improve3-1.png){#fig-comparison-bar-example-sample-improve3 width=672}\n:::\n:::\n\n\n\n\n## Mejora 3\n\nPara finalizar, vamos a cambiar el tamaño de las barras. De verdad es necesario que las barras sean tan gruesas? Normalmente, cuanto más finas sean las barras, más fácil será compararlas. Para ello, vamos a añadir `width = 0.4` a `geom_bar()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_sample |> \n  ggplot(\n    aes(\n      x = fct_infreq(Species) |> fct_rev()\n    )\n  ) +\n  geom_bar(fill = \"#98B6B1\", width = 0.4) +\n  coord_flip() +\n  labs(\n       x    = NULL,\n       y    = \"Frecuencia\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Gráfico de barras horizontales ordenado de mayor a menor y con barras más finas para la frecuencia de las especies de Iris](1104_comparison_files/figure-html/fig-comparison-bar-example-sample-improve4-1.png){#fig-comparison-bar-example-sample-improve4 width=672}\n:::\n:::\n\n\n\n\nEste sería el resultado final. Todavía se pueden hacer más mejoras, como utilizar mejores etiquetas del eje Y, y otros ajustes de diseño. Pero eso será cuestión de otro capítulo.\n:::\n\n### Ejercicio 10\n\nVamos a practicar lo aprendido con un ejercicio. Utiliza los datos de inventario para generar un gráfico de barras que muestre la frecuencia de árboles por parcela siguiendo las buenas prácticas que acabamos de ver.\n\n::: panel-tabset\n## Gráfico esperado\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Gráfico de barras horizontal ordenado de mayor a menor para la frecuencia de árboles por parcela](1104_comparison_files/figure-html/fig-comparison-bar-exercise-1.png){#fig-comparison-bar-exercise width=672}\n:::\n:::\n\n\n\n\n## Ejercicio\n\n```{webr-r}\n## Escribe aquí tu código\ninventario_tbl\n```\n\n## Solución\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninventario_tbl |> \n  ggplot(\n    aes(\n      x = fct_infreq(id_plots) |> fct_rev()\n    )\n  ) +\n  geom_bar(fill = \"#98B6B1\", width = 0.6) +\n  coord_flip() +\n  labs(\n      title = \"Árboles muestreados por parcela\",\n      x    = NULL,\n      y    = NULL\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Gráfico de barras horizontal ordenado de mayor a menor para la frecuencia de árboles por parcela](1104_comparison_files/figure-html/fig-comparison-bar-exercise-sol-1.png){#fig-comparison-bar-exercise-sol width=672}\n:::\n:::\n\n\n\n:::\n\n## Gráfico de líneas\n\nEl gráfico de líneas es una de las formas más comunes de visualizar cambios en una variable numérica a lo largo del tiempo. En este caso, vamos a utilizar el *dataset* de `gapminder` para comparar la evolución de la esperanza de vida de algunos países europeos. Para ello, vamos a utilizar la función `geom_line()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n    filter(country %in% c(\"Spain\", \"Germany\", \"France\", \"Italy\", \"Portugal\")) |>\n    ggplot(aes(x = year, y = lifeExp, color = country)) +\n    geom_line(\n      linewidth = 1\n    ) +\n    labs(\n        x     = NULL,\n        y     = \"Esperanza de vida\",\n        color = NULL\n    ) +\n    scale_color_viridis_d() +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![Gráfico de líneas para la evolución de la esperanza de vida en algunos países europeos](1104_comparison_files/figure-html/fig-line-gapminder-1.png){#fig-line-gapminder width=672}\n:::\n:::\n\n\n\n\n### Spaguetti plot\n\nEl *spaghetti plot* es un tipo de gráfico de líneas en el que se representan muchas líneas en un mismo gráfico de forma que no nos permite ver ninguna tendencia en los datos. El siguiente gráfico es un ejemplo de *spaghetti plot*:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n    ggplot(aes(x = year, y = lifeExp, color = continent, group = country)) +\n    geom_line() +\n    labs(\n        x     = NULL,\n        y     = \"Esperanza de vida\",\n        color = NULL\n    ) +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![Gráfico de líneas para la evolución de la esperanza de vida en algunos países europeos](1104_comparison_files/figure-html/fig-line-gapminder-group-1.png){#fig-line-gapminder-group width=672}\n:::\n:::\n\n\n\n\nFíjate que añadimos la estética `group = country` para que cada país tenga su propia línea (en @fig-line-gapminder no fue necesario porque ya estábamos mapeando la variable a la estética `color`). Este gráfico es algo que debes evitar. A partir de unas 6-7 líneas, deberías considerar presentar tus datos de otra forma.\n\n### Solución spaghetti plot\n\nLa primera solución, es hacer que las líneas sean grises, de forma que no destaquen tanto y hacer visible únicamente la que nos interesa enseñar al público. Por ejemplo, vamos a destacar solamente aquellos países cuyo PIB ha decrecido desde 1952 hasta 2007.\n\nPara ello, seleccionamos las columnas que necesitamos, luego filtramos los dos años que queremos comparar, expandimos la tabla para poder calcular la diferencia y finalmente extraemos los países cuya diferencia sea inferior a 0:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Filtrar datos\ncountries_vec <- gapminder |> \n    select(country, year, lifeExp) |> \n    filter(\n        year %in% c(1952, 2007)\n    ) |> \n    pivot_wider(\n        names_from   = year,\n        names_prefix = \"year_\",\n        values_from  = lifeExp\n    ) |> \n    mutate(\n        diff = year_2007 - year_1952\n    ) |> \n    filter(\n        diff < 0\n    ) |> \n    pull(country) |> \n    as.character()\n## Ver países\ncountries_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Swaziland\" \"Zimbabwe\" \n```\n\n\n:::\n:::\n\n\n\n\nUna vez tenemos estos países, vamos a generar el gráfico destacando solamente estos dos:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n    ggplot(\n        aes(x = year, y = lifeExp, color = continent, group = country)\n    ) +\n    geom_line(color = \"grey80\") +\n    geom_line(\n        aes(x = year, y = lifeExp),\n        data  = gapminder |> filter(country %in% countries_vec),\n        color = \"#BC3908\",\n        lwd   = 1\n    ) +\n    labs(\n        x     = NULL,\n        y     = \"Esperanza de vida\",\n        color = NULL,\n        title = \"La mayoría de países aumentaron su esperanza de vida entre 1952 y 2007. Swaziland y Zimbabwe no\"\n    ) +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![Spaguetti plot destancando los países cuya esperanza de vida ha decrecido](1104_comparison_files/figure-html/fig-line-gapminder-group-improve1-1.png){#fig-line-gapminder-group-improve1 width=672}\n:::\n:::\n\n\n\n\nEn este caso, fíjate que aunque tengamos un *spaguetti plot*, estamos resaltando que nuestro mensaje solamente se encuentra en dos líneas, y por lo tanto puede ser un gráfico útil.\n\nTodavía podemos mejorar este gráfico diciendo qué línea representa a cada país. Para ello, podemos utilizar la función `geom_textpath()` del paquete `{geomtextpath}`. Lo único que tenemos que cambiar es el nombre de la geometría y añadir la estética `label`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n    ggplot(\n        aes(x = year, y = lifeExp, color = continent, group = country)\n    ) +\n    geom_line(color = \"grey80\") +\n    geom_textpath(\n        aes(x = year, y = lifeExp, label = country),\n        data  = gapminder |> filter(country %in% countries_vec),\n        color = \"#BC3908\",\n        lwd   = 1\n    ) +\n    labs(\n        x     = NULL,\n        y     = \"Esperanza de vida\",\n        color = NULL,\n        title = \"La mayoría de países aumentaron su esperanza de vida entre 1952 y 2007. Swaziland y Zimbabwe no\"\n    ) +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![Spaguetti plot destancando los países cuya esperanza de vida ha decrecido](1104_comparison_files/figure-html/fig-line-gapminder-group-improve2-1.png){#fig-line-gapminder-group-improve2 width=672}\n:::\n:::\n\n\n\n\nY con esto ya tenemos una visualización mucho mejor que la inicial.\n\n### Ejercicio 11\n\nCrear un gráfico de líneas donde se vea la evolución del PIB per cápita de los países del mundo (excepto los países de África), destacando solamente aquellos cuyo PIB per cápita se haya reducido entre 1952 y 2007.\n\n::: panel-tabset\n\n## Gráfico esperado\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Gráfico de líneas para la evolución del PIB per cápita de los países del mundo](1104_comparison_files/figure-html/fig-line-gapminder-exercise-1.png){#fig-line-gapminder-exercise width=672}\n:::\n:::\n\n\n\n\n## Ejercicio\n\nEn el siguiente bloque de código se muestra como filtrar los países cuyo PIB per cápita ha disminuido entre 1952 y 2007. Utiliza estos datos para generar el gráfico de líneas.\n\n```{webr-r}\ncountries_vec <- gapminder |> \n    filter(\n        year %in% c(1952, 2007),\n        continent != \"Africa\"\n    ) |> \n    select(country, year, gdpPercap) |> \n    pivot_wider(\n        names_from   = year,\n        names_prefix = \"year_\",\n        values_from  = gdpPercap\n    ) |> \n    mutate(\n        diff = year_2007 - year_1952\n    ) |> \n    filter(\n        diff < 0\n    ) |> \n    pull(country) |> \n    as.character()\n```\n\nEscribe aquí el código para generar el gráfico:\n\n```{webr-r}\n## Escribe aquí tu código\ngapminder\n```\n\n## Solución\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n    filter(continent != \"Africa\") |>\n    ggplot(\n        aes(x = year, y = gdpPercap, color = country, group = country)\n    ) +\n    geom_line(color = \"grey80\") +\n    geom_textpath(\n        aes(x = year, y = gdpPercap, label = country),\n        data  = gapminder |> filter(country %in% countries_vec),\n        color = \"#BC3908\",\n        lwd   = 1\n    ) +\n    labs(\n        x     = NULL,\n        y     = \"PIB per cápita\",\n        color = NULL,\n        title = \"La mayoría de países aumentaron su PIB per cápita entre 1952 y 2007. Kuwait, Nicaragua y Haiti no\"\n    ) +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![Gráfico de líneas para la evolución del PIB per cápita de los países del mundo](1104_comparison_files/figure-html/fig-line-gapminder-exercise-sol-1.png){#fig-line-gapminder-exercise-sol width=672}\n:::\n:::\n",
    "supporting": [
      "1104_comparison_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}