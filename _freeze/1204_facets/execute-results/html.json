{
  "hash": "5add9bfbe34c8704d352b704cb2d7b91",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\nfilters: \n    - webr\nwebr:\n    packages: [\"dplyr\", \"ggplot2\"]\n---\n\n\n\n\n# Facetas {#sec-facets}\n\nLas facetas son una forma de dividir un gráfico en subgráficos, de acuerdo a una o más variables categóricas. En `ggplot2` tenemos las siguientes funciones para crear facetas:\n\n-   `facet_null()`: sin facetas (por defecto).\n\n-   `facet_wrap()`: facetas en forma de una grilla.\n\n-   `facet_grid()`: crea una matriz de paneles donde las filas y columnas se definen por variables categóricas.\n\nEn este capítulo vamos a trabajar con dos *datasets*:\n\n-   `gapminder`: *dataset* con la evolución temporal del desarrollo económico, población y esperanza de vida de los países del mundo (ver [Tipos de visualización](#sec-visualization-types){target=\"_blank\"}). Filtraremos solamente los datos del 2002.\n\n-   `inventario`: *dataset* con datos de inventario de 27 parcelas en los que se ha medido el DBH, altura y especie (ver @sec-vis-data).\n\nPara comenzar, vamos a cargar los paquetes necesarios y a leer los datos que utilizaremos en este capítulo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## Facet wrap\n\nLa función `facet_wrap()` permite dividir un gráfico en subgráficos, de acuerdo a una variable categórica. Por ejemplo, si queremos dividir un gráfico de dispersión en subgráficos de acuerdo a la especie de la flor, podemos hacer lo siguiente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n    ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +\n    geom_point() +\n    facet_wrap(vars(Species))\n```\n\n::: {.cell-output-display}\n![Gráfico de dispersión de longitud y ancho de sépalo, dividido por especie.](1204_facets_files/figure-html/fig-fwrap-iris-1.png){#fig-fwrap-iris width=672}\n:::\n:::\n\n\n\n\nFíjate que las variables las hemos definido dentro de la función `vars()`. Esto es necesario para que `{ggplot2}` pueda interpretarlas correctamente.\n\n::: callout-note\nOtra forma aceptada y que verás de forma más común es sin el uso de `~variable`. En este caso, se debe usar `~` antes de la variable categórica. Por ejemplo, `facet_wrap(~Species)`. El uso de `vars()` es el recomendable actualmente.\n:::\n\nVamos a ver otro ejemplo con el dataset de `gapminder`. En este caso, vamos a filtrar los datos del año 1952 y 2007 y vamos a dividir el gráfico en subgráficos de acuerdo al continente. Como puedes ver, no estamos limitados a utilizar una sola variable categórica para dividir el gráfico (aunque este ejemplo no sea muy útil).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Filtrar datos\ngapminder_filter_tbl <- gapminder %>% \n  filter(year %in% c(1952, 2007))\n\n## Gráfico\ngapminder_filter_tbl |> \n    ggplot(aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    facet_wrap(vars(continent, year))\n```\n\n::: {.cell-output-display}\n![Gráfico de dispersión de longitud y ancho de sépalo, dividido por especie.](1204_facets_files/figure-html/fig-fwrap-gapminder-1.png){#fig-fwrap-gapminder width=672}\n:::\n:::\n\n\n\n\nAlgo que también podemos hacer es cambiar el número de filas y columnas que vienen por defecto con los argumentos `ncol` y `nrow`. Otro argumento útil es `scales` que permite controlar si las escalas de los ejes deben ser libres o no. Este tiene cuatro opciones:\n\n-   `\"fixed\"` (por defecto): los ejes x e y son fijos.\n\n-   `\"free\"`: los ejes x e y son libres.\n\n-   `\"free_x\"`: el ejes x es libre mientras que el eje y es fijo.\n\n-   `\"free_y\"`: el eje y es libre mientras que el eje x es fijo.\n\nPrueba en la siguiente aplicación los distintos argumento para ver como varían los gráficos.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n\n## Load packages\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(shiny)\n\n## UI\nui <- page_sidebar(\n    sidebar = sidebar(\n        open = \"open\",\n        width = 200,\n        numericInput(\n            inputId = \"nrow\", \n            label   = \"nrow\",\n            min     = 0,\n            max     = 5,\n            value   = 2\n        ),\n        selectInput(\n            inputId = \"scales\", \n            label   = \"scales\",\n            choices = c(\"fixed\", \"free\", \"free_x\", \"free_y\"),\n            selected = \"fixed\"\n        )\n    ),\n    verbatimTextOutput(\"code\") |> card(),\n    plotOutput(\"plot\", width = 500, height = 500) |> card()\n)\n\n## Server\nserver <- function(input, output, session) {\n    \n    output$code <- renderPrint({\n        glue(\n            '\n            ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +\n                geom_point() +\n                facet_wrap(\n                    vars(continent),\n                    nrow   = {input$nrow},\n                    scales = {input$scales}\n                ) +\n                theme_bw()\n            '\n            )\n    })\n\n    ## Plot\n    output$plot <- renderPlot({\n        ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +\n            geom_point() +\n            facet_wrap(\n                vars(continent),\n                nrow   = input$nrow,\n                scales = input$scales\n            ) +\n            theme_bw(base_size = 8)\n            }, res = 96\n    )\n}\n\n## Run app\nshinyApp(ui = ui, server = server)\n```\n\n## Facet grid\n\nLa función `facet_grid()` permite dividir un gráfico en subgráficos, de acuerdo a una o dos variables categóricas, aunque su mayor utilidad ocurre cuando utilizamos dos variables. Tenemos 3 formas de utilizar esta función:\n\n-   `facet_grid(variable1 ~ variable2)`: crea una matriz de paneles donde las filas se definen por `variable1` y las columnas por `variable2`.\n\n-   `facet_grid(variable1 ~ .)`: crea una matriz de paneles donde las filas se definen por `variable1`.\n\n-   `facet_grid(. ~ variable2)`: crea una matriz de paneles donde las columnas se definen por `variable2`.\n\nEn el siguiente *tabset* puedes ver un ejemplo de cada para ver las diferencias con `facet_wrap()`.\n\n::: panel-tabset\n## Filas y columnas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_filter_tbl |> \n    ggplot(aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    facet_grid(continent ~ year)\n```\n\n::: {.cell-output-display}\n![](1204_facets_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## Filas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_filter_tbl |> \n    ggplot(aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    facet_grid(continent ~ .)\n```\n\n::: {.cell-output-display}\n![](1204_facets_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Columnas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_filter_tbl |> \n    ggplot(aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    facet_grid(. ~ year)\n```\n\n::: {.cell-output-display}\n![](1204_facets_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\nComo puedes ver, el ejemplo de las columnas nos da el mismo resultado que `facet_wrap()` para una sola variable. Además, al igual que la función anterior, podemos controlar el número de filas y columnas, además de las escalas que queremos fijas o libres aunque en este caso, todas las gráficas que pertenecen a la misma columna van a tener siempre las misma escala en `x`, y las que pertenecen a la misma fila van a tener la misma escala en `y`. Podéis verlo en este ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_filter_tbl |> \n    ggplot(aes(x = gdpPercap, y = lifeExp)) +\n    geom_point() +\n    facet_grid(\n        continent ~ year,\n        scales = \"free\"\n    )\n```\n\n::: {.cell-output-display}\n![](1204_facets_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-tip\nLas escalas fijas permiten ven mejor los patrones globales (comparar las gráficas), mientras que las escalas libres permiten mejor ver los patrones locales (de cada gráfica).\n:::\n",
    "supporting": [
      "1204_facets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}