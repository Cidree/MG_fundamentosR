---
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

# Primeros pasos con ggplot2

`{ggplot2}` es un paquete de R que permite crear gr√°ficos de forma sencilla y flexible. A diferencia de muchos paquetes de R u otros software, `{ggplot2}` se basa en una gram√°tica de gr√°ficos [@gog] que permite crear gr√°ficos siguiendo una serie de reglas basadas en la construcci√≥n de gr√°ficos a partir de capas y otros componentes.

## Objetivos {#sec-vis-objectives}

-   Entender la gram√°tica de gr√°ficos y su implicaci√≥n dentro de `{ggplot2}`

-   Estudiar los componentes que formar un gr√°fico en `{ggplot2}`

-   Crear gr√°ficos sencillos

-   Entender como funciona la herencia de datos y est√©ticas

-   Estudiar la diferencia entre mapear y asignar una est√©tica

En esta secci√≥n, trabajaremos con los siguientes paquetes:

```{r}
library(dplyr)
library(ggplot2)
library(skimr)
library(readr)
```

## Datos de trabajo {#sec-vis-data}

Antes de comenzar a trabajar con `{ggplot2}`, vamos a explorar los datos con los que vamos a trabajar. En este caso, vamos a utilizar un conjunto de datos de ejemplo que contiene informaci√≥n sobre una serie de √°rboles. Para cargar los datos, utilizaremos la funci√≥n `read_rds()` del paquete `{readr}`:

```{r cargar_datos}
inventario_tbl <- read_rds("data/inventario_prep.rds")
```

Una vez que hemos cargado los datos, vamos a utilizar la funci√≥n `skim` del paquete `{skimr}` para obtener un resumen de los datos:

```{r}
skim(inventario_tbl)
```

Esta funci√≥n nos proporciona informaci√≥n sobre las variables del conjunto de datos, incluyendo el tipo de variable, el n√∫mero de observaciones, el n√∫mero de valores faltantes (NA), la media, la desviaci√≥n est√°ndar, los valores m√≠nimos y m√°ximos, y los cuartiles.

Tenemos 2 variables num√©ricas que son el di√°metro y la altura de los √°rboles, y 2 variables categ√≥ricas que son la especie (*Pinus nigra* o *Pinus sylvestris*) y un identificador de la parcela de inventario (27 parcelas distintas). Para el di√°metro, tenemos un total de 12 valores ausentes (NA) que son aproximadamente un 1% de los datos. Para la altura, tenemos 1120 valores ausentes, que son aproximadamente un 73% de los datos. En este sentido, es importante tener en cuenta que los valores ausentes pueden afectar a los an√°lisis y visualizaciones que realicemos con los datos.

::: callout-note
Aunque estos datos tengan una estructura muy sencilla, nos servir√°n a la perfecci√≥n para los objetivos de este curso. Nuestro objetivo ser√° entender la gram√°tica de gr√°ficos como una base fundamental que nos permitir√° transmitir el mensaje que deseemos con nuestros datos.
:::

## Gram√°tica de gr√°ficos {#sec-gog}

La gram√°tica de gr√°ficos es un conjunto de reglas que definen c√≥mo se pueden construir gr√°ficos a partir de componentes b√°sicos, y fue creada por @gog. La idea de crear una gram√°tica de gr√°ficos es que, al igual que en la gram√°tica de un idioma, se pueden combinar diferentes elementos para crear gr√°ficos complejos. Cuando aprendemos a hablar un idioma, aprendemos las reglas gramaticales y el vocabulario, y con estos elementos podemos crear frases y textos. De la misma forma, al aprender la gram√°tica de gr√°ficos, podemos crear gr√°ficos complejos a partir de componentes b√°sicos.

Posteriormente se cre√≥ `{ggplot2}` [@layered-grammar], que utiliza las reglas gramaticales de la gram√°tica de gr√°ficos para crear gr√°ficos en R. `{ggplot2}` se basa en la idea de que un gr√°fico se puede construir a partir de **capas**, y cada capa se puede a√±adir al gr√°fico para a√±adir informaci√≥n adicional.

## Componentes {#sec-components}

La gram√°tica de gr√°ficos tiene una serie de componentes diferenciados [@fig-layers] que se definen en @layered-grammar. Estos componentes son:

-   **Datos (*data*)**: conjunto de datos que utilizamos para generar el gr√°fico.

-   **Geometr√≠as (*geom*)**: se refiere a la forma de representaci√≥n de nuestros datos. Algunos ejemplos de geometr√≠as son: puntos, l√≠neas, histograma, diagramas de caja, etc.

-   **Est√©ticas (*aes*)**: tambi√©n denominados *aesthetic mappings*. Se refiere a los elementos que definen la est√©tica de las geometr√≠as. Si ponemos el ejemplo de un gr√°fico de puntos (*scatter plot*), las est√©ticas pueden ser: su forma (punto, rect√°ngulo, tri√°ngulo...), su tama√±o, color, transparencia ...

-   **Transformaciones estad√≠sticas (*stat*)**:se refiere al estad√≠stico utilizado para resumir nuestros datos. Por ejemplo, para crear un histograma resumimos nuestros datos en intervalos (*bins*) y contamos el n√∫mero de observaciones que existen dentro de este intervalo. Este componente es m√°s avanzado que el resto, por lo que trabajaremos solamente con los valores que vienen por defecto.

-   **Escalas (*scale*)**: transforman los valores de los datos en est√©ticas. Nos permiten controlar los colores, tama√±os, formas, etc. Tambi√©n nos permiten controlar aspectos de las leyendas y ejes.

::: callout-important
Existe una escala por cada est√©tica utilizada.
:::

-   **Facetas (*facets*)**: consiste en generar subgr√°ficos seg√∫n un atributo. Por ejemplo, utilizando nuestros datos de inventario, podemos generar un gr√°fico de puntos donde representemos la relaci√≥n di√°metro-altura para todos los datos, o bien podemos generar facetas que generen un gr√°fico por cada una de las especies (es decir, un *scatter plot* para *P. nigra* y otro distinto para *P. sylvestris*).

-   **Coordenadas (*coord*)**: sistema de coordenadas utilizado para mapear los datos. Por defecto y normalmente, utilizaremos el sistema de coordenadas cartesiano. Otros sistemas disponibles son el sistema de coordenadas polares (que nos permiten crear los incre√≠bles gr√°ficos circulares), o tambi√©n sistemas de referencia de coordenadas para generar mapas (s√≠, con `{ggplot2}` podemos generar mapasüó∫Ô∏è).

-   **Tema (*theme*)**: nos permite controlar todos los aspectos relacionados con la apariencia del gr√°fico, como puede ser la fuente de texto, tama√±o de fuente, posici√≥n de elementos como la leyenda, colores de relleno, etc.

![Componentes principales de la gram√°tica de gr√°ficos](images/layers.png){#fig-layers fig-align="center"}

Finalmente, podemos definir una **capa** como la combinaci√≥n de datos, est√©ticas, geometr√≠as y transformaciones estad√≠sticas [@book-ggplot2], y en la mayor√≠a de las ocasiones, estos cuatro componentes se especificar√°n dentro de una funci√≥n que comienza por `geom_*`, aunque los datos y las est√©ticas tambi√©n se pueden especificar dentro de la funci√≥n `ggplot()`. No os preocup√©is, pronto veremos las diferencias entre estas opciones.

::: callout-important
Un mismo gr√°fico puede contener m√°s de una capa y estas capas pueden (o no) compartir los mismo datos:

-   Capa 1: utiliza los datos de inventario, como est√©ticas utiliza las variables `DBH_mm` y `height_m`, la geometr√≠a de punto y como transformaci√≥n estad√≠stica utiliza **identity**. Esta transformaci√≥n es utilizada por muchas geometr√≠as y significa que va a utilizar los valores tal cual aparecen en la tabla de datos, sin realizar ninguna transformaci√≥n. En t√©rminos matem√°ticos significa que $f(x)= x$.

-   Capa 2: utiliza los datos de inventario, como est√©ticas utiliza las variables `DBH_mm` y `height_m`, la geometr√≠a de l√≠nea y como transformaci√≥n estad√≠stica utiliza **smooth**. Esta transformaci√≥n utiliza un m√©todo de suavizado (por defecto una [Regresi√≥n Local (](https://es.wikipedia.org/wiki/Regresi%C3%B3n_local)[LOESS](https://es.wikipedia.org/wiki/Regresi%C3%B3n_local){target="_blank"}[)](https://es.wikipedia.org/wiki/Regresi%C3%B3n_local)) donde se genera una l√≠nea que aproxima la tendencia de los datos.

```{r}
#| echo: false
inventario_tbl |> 
    na.omit() |> 
    ggplot(
        aes(dbh_mm / 10, height_m)
    ) +
    geom_point() +
    geom_smooth() +
    theme_bw() +
    labs(
        x = "DBH (cm)",
        y = "h (m)",
        title = "Relaci√≥n altura di√°metro"
    )
```
:::

El tipo de gr√°fico viene definido por dos elementos: el tipo de geometr√≠a y la transformaci√≥n estad√≠stica. Por poner un ejemplo relacionado con el anterior:

-   **Gr√°fico de l√≠neas**: se define por una geometr√≠a de l√≠nea y una transformaci√≥n estad√≠stica ***identity*** (`geom_line(stat = "identity")`).

-   **Gr√°fico suavizado**: utiliza la geometr√≠a de l√≠nea y una transformaci√≥n estad√≠stica ***smooth*** (`geom_line(stat = "smooth")`).

No obstante, los gr√°ficos comunes como el gr√°fico suavizado vienen incluidos en `{ggplot2}` a trav√©s de una funci√≥n que utiliza la transformaci√≥n estad√≠stica adecuada por defecto, y solamente nos har√° falta llamar a la funci√≥n adecuada sin utilizar el argumento `stat`:

| Funci√≥n       | T.E. por defecto |
|---------------|------------------|
| geom_line()   | identity         |
| geom_smooth() | smooth           |

## Ejemplo r√°pido {#sec-first-example}

Para digerir los conceptos anteriores, vamos a ver un ejemplo r√°pido. Para este ejemplo, vamos a eliminar los valores ausentes, ya que el objetivo es solamente entender los conceptos anteriores y no generar un gr√°fico para publicar.

```{r}
inventario_completo_tbl <- na.omit(inventario_tbl)
print(inventario_completo_tbl)
```

De este modo nos quedamos con `r nrow(inventario_completo_tbl)` observaciones.

::: panel-tabset
## L√≠neas

```{r}
#| label: fig-example-line
#| fig-cap: "Ejemplo b√°sico de gr√°fico de l√≠neas"
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_line()
```

## Suavizado 1

```{r}
#| label: fig-example-suave1
#| fig-cap: "Ejemplo b√°sico de l√≠nea suavizada con geom_line()"
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_line(
        stat = "smooth"
    )
```

## Suavizado 2

```{r}
#| label: fig-example-suave2
#| fig-cap: "Ejemplo b√°sico de l√≠nea suavizada con geom_smooth()"
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_smooth()
```
:::

Compara las tres gr√°ficas. En @fig-example-line no utilizamos el argumento `stat` ya que el que viene por defecto es `identity`. Del mismo modo, en @fig-example-suave2 tampoco es necesario utilizar el argumento ya que `stat = "smooth"` viene por defecto.

::: callout-note
En este curso no vamos a trabajar con transformaciones estad√≠sticas en mayor profundidad. Esta secci√≥n solamente quiere remarcar que detr√°s de cada geometr√≠a existe una transformaci√≥n estad√≠stica que viene dada por defecto.
:::

Tambi√©n te habr√°s dado cuenta de que no hemos utilizado los componentes: facetas, escalas, coordenadas ni tema. Esto se debe a que estos componentes **siempre**, en **todos los gr√°ficos** tienen un valor por defecto. Pero todo a su tiempo. Vamos a empezar desengranando el c√≥digo anterior. Para tener una idea de los argumentos que estamos utilizando vamos a comparar los siguientes gr√°ficos derivados de @fig-example-suave2:

::: panel-tabset
## M√©todo 1

```{r}
ggplot(
    data    = inventario_completo_tbl,
    mapping = aes(x = dbh_mm, y = height_m)
) +
    geom_smooth()
```

## M√©todo 2

```{r}
ggplot(inventario_completo_tbl, aes(x = dbh_mm, y = height_m)) +
    geom_smooth()
```

## M√©todo 3

```{r}
ggplot(
    inventario_completo_tbl, 
    aes(x = dbh_mm, y = height_m)
) +
    geom_smooth()
```

## M√©todo 4

```{r}
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_smooth()
```
:::

Como veis, el resultado es exactamente el mismo. Normalmente utilizaremos el *pipe operator* (`|>` o `%>%`) como hacemos en el m√©todo 4 para inyectar los datos en el primer argumento de la funci√≥n `ggplot()` que es `data`. El argumento `mapping` tambi√©n se sabe perfectamente que es el segundo argumento de la funci√≥n, por lo que no es necesario escribir `mapping = ...` si no directamente `aes(...)`. En resumen, cualquier m√©todo de escritura de c√≥digo de los anteriores se adecua en mayor o menor medida a los principios de dise√±o ordenado [@tidy-data]. No obstante, los m√©todos m√°s adecuados ser√°n los m√©todos 3 y 4 ya que nos ayudar√°n a que nuestro c√≥digo sea m√°s legible dado que la indentaci√≥n nos ayuda a ver a qu√© funci√≥n pertenece cada argumento y har√° que nuestro c√≥digo sea mucho m√°s f√°cil de leer y mantener. Finalmente, para a√±adir componentes a nuestro gr√°fico utilizamos el operador matem√°tico `+`.

::: callout-warning
Desgraciadamente, mucha gente utiliza el m√©todo 2 para escribir c√≥digo. Aunque en el ejemplo anterior no es algo grave, es una mala costumbre para muchos otros casos. Entiendes el siguiente c√≥digo?

```{r}
filter(select(filter(inventario_completo_tbl, dbh_mm >= 300), dbh_mm:nombre_ifn), nombre_ifn == "Pinus sylvestris")
```

Y si lo escribo de este modo?

```{r}
filter(
    select(
        filter(
            inventario_completo_tbl, dbh_mm >= 300
        ), 
        dbh_mm:nombre_ifn), 
    nombre_ifn == "Pinus sylvestris"
)
```

Y de este?

```{r}
inventario_completo_tbl |> 
    filter(dbh_mm >= 300) |> 
    select(dbh_mm:nombre_ifn) |> 
    filter(nombre_ifn == "Pinus sylvestris")
```

Como ves, tres formas de escribir el mismo c√≥digo aumentando la legibilidad del mismo. Estos principios se utilizar√°n a lo largo de este curso. Una lectura muy recomendable es [The tidyverse style guide](https://style.tidyverse.org/index.html){target="_blank"}.
:::

## Herencia de est√©ticas {#sec-inheritance-aes}

Vamos a continuar con el ejemplo de la l√≠nea suavizada. Vamos a a√±adir otra capa donde se muestre la distribuci√≥n de las observaciones con una geometr√≠a de punto:

```{r}
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_point() +
    geom_smooth()
```

En este ejemplo estamos viendo una propiedad **MUY IMPORTANTE** en relaci√≥n a la generaci√≥n de gr√°ficos con `{ggplot2}`. Dentro de la funci√≥n `ggplot()` introducimos las est√©ticas y los datos. En siguiente lugar, las geometr√≠as **heredan** estos elementos. Es decir, este gr√°fico podr√≠a ser algo m√°s verboso del siguiente modo:

```{r}
ggplot() +
    geom_point(
        data = inventario_completo_tbl,
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_smooth(
        data = inventario_completo_tbl,
        aes(x = dbh_mm, y = height_m)
    ) 
```

En este caso, estamos especificando los datos y las est√©ticas en cada una de las geometr√≠as. Aunque esto es posible, no es recomendable ya que aumenta la longitud del c√≥digo y puede llevar a errores si no se especifican correctamente los datos y las est√©ticas en cada una de las geometr√≠as. No obstante, en muchos casos es necesario especificar los datos y las est√©ticas en cada una de las geometr√≠as, ya que pueden utilizar est√©ticas diferentes o incluso datos diferentes. Vamos a ver un caso sencillo donde queremos representar la relaci√≥n entre el di√°metro y la altura de los √°rboles, pero queremos que los puntos de una especie sean de un color diferente a los de la otra especie. Vamos a ver una serie de ejemplos:

::: panel-tabset
## Color - Todos

En este caso introducimos la est√©tica `color` dentro de la funci√≥n de `ggplot()`. En este caso **todas las geometr√≠as** heredan las est√©ticas:

```{r}
#| label: fig-example-color-combined
#| fig-cap: "Ejemplo de scatter plot y l√≠nea de tendencia con est√©tica de color para ambas geometr√≠as"
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m, color = nombre_ifn)
    ) +
    geom_point() +
    geom_smooth() 
```

## Color - Puntos

En este otro caso, introducimos la est√©tica `color` solamente dentro de la funci√≥n `geom_point()`, por lo que solamente los puntos utilizan esta est√©tica:

```{r}
#| label: fig-example-color-point
#| fig-cap: "Ejemplo de scatter plot y l√≠nea de tendencia con est√©tica de color para la geometr√≠a de punto"
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_point(aes(color = nombre_ifn)) +
    geom_smooth()
```

## Color - Smooth

En este √∫ltimo caso, a√±adimos la est√©tica `color` a funci√≥n `geom_smooth()`, por lo que solamente se colorean las l√≠neas de tendencia:

```{r}
#| label: fig-example-color-smooth
#| fig-cap: "Ejemplo de scatter plot y l√≠nea de tendencia con est√©tica de color para la geometr√≠a de la l√≠nea de tendencia"
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_point() +
    geom_smooth(aes(color = nombre_ifn))
```
:::

Tambi√©n puedes ver que en los ejemplos anteriores, la geometr√≠a de punto la escribimos antes que la l√≠nea de tendencia. De este modo se dibujan en el gr√°fico, primero los puntos, y en siguiente lugar se dibuja la l√≠nea de tendencia sobre los puntos.

## Mapear y asignar est√©ticas {#sec-map-assign-aes}

Para finalizar este cap√≠tulo, vamos a ver dos conceptos que al principio pueden parecer un poco confusos, pero que ver√©is que tienen todo el sentido del mundo dentro de la gram√°tica de gr√°ficos. Vamos a comenzar viendo estas dos frases que inicialmente no tendr√°n mucho sentido, pero que entenderemos al final de esta secci√≥n:

-   Mapeamos est√©ticas a variables

-   Asignamos est√©ticas a valores constantes

Vamos a seguir trabajando con la geometr√≠a de puntos, ya que es una de las m√°s sencillas para aprender la teor√≠a. Si busc√°is en la documentaci√≥n oficial de las funciones `geom_*`, encontrar√©is una secci√≥n de est√©ticas como la que se muestra en la @fig-aes-point:

![Est√©titcas de la geometr√≠a de punto (geom_point)](images/esteticas-punto.png){#fig-aes-point fig-align="center"}

::: callout-important
Todas las geometr√≠as tienen una serie de est√©ticas obligatorias y otras opcionales. Para la geometr√≠a de punto las obligatorias son **x** e **y**
:::

TODAS estas est√©ticas se pueden mapear a variables, es decir, todas pueden ir dentro de la funci√≥n `aes(x, y, alpha, color, fill ...)`. Siempre que vayan dentro de la funci√≥n `aes()`, estaremos mapeando la est√©tica a una variable, y por lo tanto, el valor de la est√©tica debe ser una variable de nuestros datos como en el siguiente exagerado ejemplo:

```{r}
inventario_completo_tbl |> 
    ggplot(
        aes(
            x     = dbh_mm,
            y     = height_m,
            color = nombre_ifn,
            shape = nombre_ifn,
            size  = height_m
        )
    ) +
    geom_point()
```

Sin embargo, algunas de las est√©ticas tambi√©n se pueden **asignar a valores constantes**. Es decir, en lugar de generar un color de punto por cada especie, podemos elegir que todos los puntos sean de color verde oscuro. O que la forma de todos los puntos sea triangular. En este caso hablamos de asignar constantes, y las est√©ticas se escriben **dentro de la funci√≥n de `geom_*` y fuera de `aes()`**:

```{r}
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_point(
        color = "darkgreen",
        shape = "triangle",
        size  = 3
    )
```

En este sentido, algo que **NO** podemos hacer y que suele ser un fallo com√∫n al empezar con `{ggplot2}` es lo siguiente:

```{r}
#| eval: false
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_point(
        color = nombre_ifn
    )
```

Nos dar√° el error "*Error : objeto 'nombre_ifn' no encontrado*". Como `color` est√° fuera de `aes()`, la funci√≥n est√° buscando si en el entorno existe el objeto `nombre_ifn`. Para entender este concepto, vamos a ver el siguiente c√≥digo:

```{r}
## Asignar un color a un objeto
nombre_ifn <- "#456435"
## Gr√°fico
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m)
    ) +
    geom_point(
        color = nombre_ifn
    )
```

Cuando una est√©tica se encuentra fuera de `aes()`, no busca `nombre_ifn` dentro de las columnas de los datos, si no que lo busca en el *Global Environment*. Finalmente, tampoco podemos introducir constantes dentro de `aes()`:

```{r}
inventario_completo_tbl |> 
    ggplot(
        aes(x = dbh_mm, y = height_m, color = "blue")
    ) +
    geom_point()
```

Esto no funciona porque lo que hace es crear una variable constante cuyos valores son "blue". Es decir, esto es equivalente a:

```{r}
inventario_completo_tbl |> 
    mutate(
        colour = "blue"
    ) |> 
    ggplot(
        aes(x = dbh_mm, y = height_m, color = colour)
    ) +
    geom_point()
```

Es decir, no tiene nada de sentido. Para finalizar, vamos a resumir esta secci√≥n de nuevo en las frases que ve√≠amos al inicio:

-   Mapeamos est√©ticas a variables

-   Asignamos est√©ticas a valores constantes

{{< include references.qmd >}}
